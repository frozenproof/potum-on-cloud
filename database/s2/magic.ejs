<!DOCTYPE html>

<html>

<head>
  <title>Magic Skills Tree</title>
  <link rel="icon" type="image/x-icon" href="../images/favicon.ico">
  <meta name="google-site-verification" content="939NygIf8312fvMoh3tfwAkIxVNX4b6Aq6CIs1w1VZk" />
  <style>
    /* styles.css */
    /* Global Styles */
    body {
      background-image: url('../images/appbackground.png');
      /* background-color: #ffe600b4; */
      background-size: cover;
      background-attachment: fixed;
      background-position: center;
      color: #333;
      font-family: Arial, sans-serif;
    }

    /* View Container */
    .view {
      width: 90%;
      margin: 15px auto;
      padding: 15px;
      background-color: rgba(255, 255, 255, 0.95);
      border-radius: 8px;
      display: none;
      /* Initially hidden */
    }

    /* Button Styles */
    button {
      background-color: #0073e6;
      color: white;
      border: none;
      padding: 10px 20px;
      cursor: pointer;
      border-radius: 5px;
    }

    button a {
      color: white;
      text-decoration: none;
    }

    /* Navigation Links */
    nav a {
      color: #0080ff;
      text-decoration: none;
      margin: 0 10px;
    }

    nav a:hover {
      text-decoration: underline;
    }

    .container33 {
      background-color: rgba(255, 255, 255, 0.95);
      padding: 15px;
      margin: 15px auto;
      border-radius: 8px;
      max-width: 80%;
    }
  </style>
	<link rel="stylesheet" href="../../templates/functions-skills-list/skills.css">

  <script src="../templates/axios.min.js"></script>
  <script>
    // wew have works to do
    function roundToTwoDecimals(value) {
      return Math.round(value * 100) / 100;
    }
  </script>
</head>

<body>
  <%- include('../../templates/headers/header') %>

    <div id="content">
      <div class="container">
        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/arrows.png" width="34" height="34">
                Magic: Arrows
              </p>
              <p class="medium">
                Skill Magic: Arrows Level 1 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>100</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>12</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Shoot small magic arrows. The arrows increase as the skill levels up.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +25</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Boost on the Number of Attacks</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicArrowsWeapon" onchange="calcMagicArrowsValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicArrowsLevel" onchange="calcMagicArrowsValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>"Magic: Arrow Enhancer" Registlet Level:</b></span>
            <select id="magicArrowsRegistlet" onchange="calcMagicArrowsValues()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicArrowsCSPD"
              onchange="calcMagicArrowsValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicArrowsChain" onchange="calcMagicArrowsValues()"><br>
            <div id="magicArrowsChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicArrowsChainLevel" onchange="calcMagicArrowsValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicArrowsChainStackInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mArrowsChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicArrowsValues()">
            </div>
            <br>
            <span id="magicArrowsValues">
              <li><b>Skill Constant: </b> 50; constant for each hit</li>
              <li><b>Skill Multiplier:</b> 1.5; multiplier for each hit</li>
              <li><b>Hit Count:</b> 6 hits; damage calculation is done <b>for the first hit</b>, then <b>copied for the
                  other
                  hits</b></li><br>
              <li><b>Cast Time:</b> 2 seconds (affected by CSPD)</li>
              <li>Grants <b>Chain Cast buff</b> upon activation if <b>Chain Cast</b> has been learned</li><br><b>Extra
                info:</b>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li>As with most other "lingering" skills, if <b>Magic: Arrows</b> is recast while the previous <b>Magic:
                  Arrows</b> is still active, the latter will be removed and all of its remaining hits will be canceled
              </li>
              <li><b>Magic: Arrows</b> name and effect animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Fire Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Water Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Wind Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Earth Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Light Arrows</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Dark Arrows</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function weaponChainStackCheck(weapon, ccStackSection) {
                if (weapon == "Staff" || weapon == "MD") { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcMagicArrowsConstant(level, result) {
                var constant = 40 + level * 1
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}; constant for each hit</li>`
              }

              function calcMagicArrowsMultiplier(level, weapon, result) {
                var multiplier = 0.65 + 0.06 * level
                if (weapon == "Staff") { multiplier += 0.25 }
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}; multiplier for each hit</li>`
              }

              function calcMagicArrowsHitCount(level, weapon, registlet, result) {
                var hitCount = 2 + Math.floor((level - 1) / 2) + registlet * 1
                if (weapon == "MD" || weapon == "SubMD") { hitCount += 2 }
                result.innerHTML += `<li><b>Hit Count:</b> ${hitCount} hits; damage calculation is done <b>for the first hit</b>, then <b>copied for the other hits</b></li><br>`
              }

              function calcMagicArrowsCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result) {
                var baseCastTime = 2
                if (weapon == "Staff" || weapon == "MD") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcMagicArrowsMotionSpeed(CSPD, chainCast, chainCastLevel, result) {
                var castTime = calcCastTime(2, CSPD)
                var motionSpeed = 0
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                var HTML = `<li>Grants <b>Chain Cast buff</b> upon activation if <b>Chain Cast</b> has been learned</li>`
                if (motionSpeed > 0) { HTML += `<li><b>Motion Speed</b> of <b>Magic: Arrows</b> +${motionSpeed}%</li>` }
                result.innerHTML += HTML
              }

              function addMagicArrowsExtraInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>As with most other "lingering" skills, if <b>Magic: Arrows</b> is recast while the previous <b>Magic: Arrows</b> is still active, the latter will be removed and all of its remaining hits will be canceled</li>
    <li><b>Magic: Arrows</b> name and effect animation will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Fire Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Water Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Wind Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Earth Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Light Arrows</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Dark Arrows</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicArrowsValues() {
                var weaponSelector = document.getElementById("magicArrowsWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicArrowsLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var registletSelector = document.getElementById("magicArrowsRegistlet")
                var registlet = registletSelector[registletSelector.selectedIndex].value
                var CSPD = document.getElementById("magicArrowsCSPD").value
                var chainCast = document.getElementById("magicArrowsChain").checked
                var chainCastSection = document.getElementById("magicArrowsChainActive")
                var chainCastSelector = document.getElementById("magicArrowsChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var ccStackSection = document.getElementById("magicArrowsChainStackInput")
                var ccStack = document.getElementById("mArrowsChainStack").value
                var result = document.getElementById("magicArrowsValues")
                chainCastCheck(chainCast, chainCastSection)
                weaponChainStackCheck(weapon, ccStackSection)
                calcMagicArrowsConstant(level, result)
                calcMagicArrowsMultiplier(level, weapon, result)
                calcMagicArrowsHitCount(level, weapon, registlet, result)
                calcMagicArrowsCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result)
                calcMagicArrowsMotionSpeed(CSPD, chainCast, chainCastLevel, result)
                addMagicArrowsExtraInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicArrowsValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/javelin.png" width="34" height="34">
                Magic: Javelin
              </p>
              <p class="medium">
                Skill Magic: Javelin Level 1 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>200</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Drop a large magic javelin on the target. Chance to inflict a status ailment. The status ailment
                depends on
                the element.<br><br>
                <b>Element: [Ailment]</b><br>
                • Neutral: [Flinch]<br>
                • Fire: [Ignite]<br>
                • Water: [Freeze]<br>
                • Wind: [Blind]<br>
                • Earth: [Slow]<br>
                • Light: [Dizzy]<br>
                • Dark: [Fear]<br><br>
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +50</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Status Ailment Rate +25%</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicJavelinWeapon" onchange="calcMagicJavelinValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicJavelinLevel" onchange="calcMagicJavelinValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Main Weapon's Element:</b></span>
            <select id="magicJavelinElement" onchange="calcMagicJavelinValues()">
              <option value="Neutral" selected="">Neutral</option>
              <option value="Fire">Fire</option>
              <option value="Water">Water</option>
              <option value="Wind">Wind</option>
              <option value="Earth">Earth</option>
              <option value="Light">Light</option>
              <option value="Dark">Dark</option>
            </select><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicJavelinChain" onchange="calcMagicJavelinValues()"><br>
            <div id="magicJavelinChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicJavelinChainLevel" onchange="calcMagicJavelinValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <br>
            <span id="magicJavelinValues">
              <li><b>Skill Constant: </b> 200</li>
              <li><b>Skill Multiplier:</b> 3</li><br>
              <li><b>Flinch Chance:</b> 75%</li>
              <li><b>Flinch Duration:</b> 2 seconds</li>
              <li><b>Resistance Duration on Difficulties:</b> 7 seconds (<b>Easy</b>, <b>Normal</b> and <b>Hard</b>); 8
                seconds (<b>Nightmare</b>); 11 seconds (<b>Ultimate</b>)</li><br><b>Extra info:</b>
              <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most
                ailments have the same resistance duration as their own duration, unless stated otherwise</li>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li><b>Magic: Javelin</b> name and effect animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Fire Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Ice Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Wind Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Rock Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Holy Javelin</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Dark Javelin</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function toggleJavelinChainCast(chainCast, chainCastDiv) {
                if (chainCast) { chainCastDiv.style = "display: block" }
                else { chainCastDiv.style = "display: none" }
              }

              function calcMagicJavelinConstant(level, result) {
                var constant = 50 + level * 15
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}</li>`
              }

              function calcMagicJavelinMultiplier(level, weapon, result) {
                var multiplier = 1.5 + 0.1 * level
                if (weapon == "Staff") { multiplier += 0.5 }
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}</li><br>`
              }

              function calcMagicJavelinMotionSpeed(chainCast, chainCastLevel, result) {
                var motionSpeed = 0;
                if (chainCast) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Javelin</b> +${motionSpeed}%</li>` }
              }

              function calcMagicJavelinAilmentChance(level, weapon, element, result) {
                const elementToAilmentArray = {
                  Neutral: "Flinch",
                  Fire: "Ignite",
                  Water: "Freeze",
                  Wind: "Blind",
                  Earth: "Slow",
                  Light: "Dizzy",
                  Dark: "Fear"
                }
                var chance = Math.floor(7.5 * level)
                if (weapon == "MD") { chance += 25 }
                var duration
                if (element == "Neutral") { duration = 2 }
                else { duration = 10 }
                var HTML = `<li><b>${elementToAilmentArray[element]} Chance:</b> ${chance}%</li>
      <li><b>${elementToAilmentArray[element]} Duration:</b> ${duration} seconds</li>`
                if (element == "Neutral") { HTML += `<li><b>Resistance Duration on Difficulties:</b> 7 seconds (<b>Easy</b>, <b>Normal</b> and <b>Hard</b>); 8 seconds (<b>Nightmare</b>); 11 seconds (<b>Ultimate</b>)</li>` }
                result.innerHTML += HTML
              }

              function addMagicJavelinExtraInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
      <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most ailments have the same resistance duration as their own duration, unless stated otherwise</li>
      <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
      <li><b>Magic: Javelin</b> name and effect animation will change depending on its element:<ul>
        <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Fire Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Water:</b> Ice Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Wind Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Rock Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Light:</b> Holy Javelin</li>
        <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Dark Javelin</li>
        </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`;
              }

              function calcMagicJavelinValues() {
                var weaponSelector = document.getElementById("magicJavelinWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var elementSelector = document.getElementById("magicJavelinElement")
                var element = elementSelector[elementSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicJavelinLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var chainCastDiv = document.getElementById("magicJavelinChainActive")
                var chainCast = document.getElementById("magicJavelinChain").checked
                var chainCastSelector = document.getElementById("magicJavelinChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var result = document.getElementById("magicJavelinValues")
                toggleJavelinChainCast(chainCast, chainCastDiv)
                calcMagicJavelinConstant(level, result)
                calcMagicJavelinMultiplier(level, weapon, result)
                calcMagicJavelinMotionSpeed(chainCast, chainCastLevel, result)
                calcMagicJavelinAilmentChance(level, weapon, element, result)
                addMagicJavelinExtraInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }
              calcMagicJavelinValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/lances.png" width="34" height="34">
                Magic: Lances
              </p>
              <p class="medium">
                Skill Magic: Lances Level 2 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>300</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>14</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Shoot magic lances one after another. The lances increase as the skill levels up. Chance to inflict
                [Stop]
                on
                the target.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +150<br> Power increases depending on INT.<br> 3x Stop Rate</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power increases depending on INT.<br> Boost on the Number of Attacks<br> 3x Stop Rate</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicLancesWeapon" onchange="calcMagicLancesValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicLancesLevel" onchange="calcMagicLancesValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>"Magic: Lances Catalyst" Registlet Level:</b></span>
            <select id="magicLancesRegistlet" onchange="calcMagicLancesValues()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
            </select><br>
            <div id="lancesIntInput" style="display: block;">
              <span class="sub-title"><b>Total INT:</b></span>
              <input type="number" id="lancesINT" value="1" style="width: 4em; text-align: right"
                onchange="calcMagicLancesValues()"><br>
            </div>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicLancesCSPD"
              onchange="calcMagicLancesValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicLancesChain" onchange="calcMagicLancesValues()"><br>
            <div id="magicLancesChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicLancesChainLevel" onchange="calcMagicLancesValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicLancesChainStackInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mLancesChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicLancesValues()">
            </div>
            <br>
            <span id="magicLancesValues">
              <li><b>Skill Constant: </b> 700; constant for each hit</li>
              <li><b>Skill Multiplier:</b> 5.5; multiplier for each hit</li>
              <li><b>Hit Count:</b> 3 hits; damage calculation is done <b>for the first hit</b>, then <b>copied for the
                  other
                  hits</b></li>
              <li><b>Interval between shots:</b> 2.33 seconds (estimated)</li><br>
              <li><b>Cast Time:</b> 2 seconds (affected by CSPD)</li>
              <li><b>Stop Chance:</b> 90%</li>
              <li><b>Stop Duration:</b> 10 seconds</li>
              <li><b>Resistance Duration:</b> 20 seconds</li><br><b>Extra info:</b>
              <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most
                ailments have the same resistance duration as their own duration, unless stated otherwise</li>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li>As with most other "lingering" skills, if <b>Magic: Lances</b> is recast while the previous <b>Magic:
                  Lances</b> is still active, the latter will be removed and all of its remaining hits will be canceled
              </li>
              <li><b>Magic: Lances</b> name and hit animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Lances</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Vulcan</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Icicles</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Wind Thrust</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Rock Cannon</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Vanishment</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Eclipse</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function weaponIntCheck(weapon, intSection) {
                if (weapon != "Other") { intSection.style = "display: block" }
                else { intSection.style = "display: none" }
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function weaponChainStackCheck(weapon, ccStackSection) {
                if (weapon == "Staff" || weapon == "MD") { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcMagicLancesConstant(level, result) {
                var constant = 300 + level * 40
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant};  constant for each hit</li>`
              }

              function calcMagicLancesMultiplier(level, weapon, lancesINT, result) {
                var multiplier = 2.5 + 0.15 * level
                if (weapon == "Staff") { multiplier += 1.5 + lancesINT / 500 }
                else if (weapon == "MD" || weapon == "SubMD") { multiplier += lancesINT / 500 }
                if (multiplier - Math.floor(multiplier * 100) / 100 < 0.00999999) { multiplier = Math.floor(multiplier * 100) / 100 }
                else { multiplier = Math.round(multiplier * 100) / 100 }
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}; multiplier for each hit</li>`
              }

              function calcMagicLancesHitCount(level, weapon, result) {
                var hitCount = Math.floor(2 + (level - 1) / 5)
                if (weapon == "MD" || weapon == "SubMD") { hitCount += 2 }
                result.innerHTML += `<li><b>Hit Count:</b> ${hitCount} hits; damage calculation is done <b>for the first hit</b>, then <b>copied for the other hits</b></li>`
              }

              function calcMagicLancesInterval(registlet, result) {
                const baseInterval = 2.33
                var interval = baseInterval - registlet * 0.1
                interval = Math.round(interval * 100) / 100
                result.innerHTML += `<li><b>Interval between shots:</b> ${interval} seconds (estimated)</li><br>`
              }

              function calcMagicLancesCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result) {
                var baseCastTime = 2
                if (weapon == "Staff" || weapon == "MD") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcMagicLancesMotionSpeed(CSPD, chainCast, chainCastLevel, result) {
                var castTime = calcCastTime(2, CSPD);
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Lances</b> +${motionSpeed}%</li>` }
              }

              function calcMagicLancesStopChance(level, weapon, result) {
                var chance = 10 + 2 * level
                if (weapon != "Other") { chance *= 3 }
                result.innerHTML += `<li><b>Stop Chance:</b> ${chance}%</li>
    <li><b>Stop Duration:</b> 10 seconds</li>
    <li><b>Resistance Duration:</b> 20 seconds</li>`
              }

              function addMagicLancesPlacedInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most ailments have the same resistance duration as their own duration, unless stated otherwise</li>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>As with most other "lingering" skills, if <b>Magic: Lances</b> is recast while the previous <b>Magic: Lances</b> is still active, the latter will be removed and all of its remaining hits will be canceled</li>
    <li><b>Magic: Lances</b> name and hit animation will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Lances</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Vulcan</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Icicles</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Wind Thrust</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Rock Cannon</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Vanishment</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Eclipse</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicLancesValues() {
                var weaponSelector = document.getElementById("magicLancesWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicLancesLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var registletSelector = document.getElementById("magicLancesRegistlet")
                var registlet = registletSelector[registletSelector.selectedIndex].value
                var lancesINT = document.getElementById("lancesINT").value
                var intSection = document.getElementById("lancesIntInput")
                var CSPD = document.getElementById("magicLancesCSPD").value
                var chainCast = document.getElementById("magicLancesChain").checked
                var chainCastSection = document.getElementById("magicLancesChainActive")
                var chainCastSelector = document.getElementById("magicLancesChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var ccStackSection = document.getElementById("magicLancesChainStackInput")
                var ccStack = document.getElementById("mLancesChainStack").value
                var result = document.getElementById("magicLancesValues")
                weaponIntCheck(weapon, intSection)
                chainCastCheck(chainCast, chainCastSection)
                weaponChainStackCheck(weapon, ccStackSection)
                calcMagicLancesConstant(level, result)
                calcMagicLancesMultiplier(level, weapon, lancesINT, result)
                calcMagicLancesHitCount(level, weapon, result)
                calcMagicLancesInterval(registlet, result)
                calcMagicLancesCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result)
                calcMagicLancesMotionSpeed(CSPD, chainCast, chainCastLevel, result)
                calcMagicLancesStopChance(level, weapon, result);
                addMagicLancesPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicLancesValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/impact.png" width="34" height="34">
                Magic: Impact
              </p>
              <p class="medium">
                Skill Magic: Impact Level 3 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>200</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>24</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Attack enemies around you with a shock wave. Halves MP cost of the next skill. The effect will become
                weak
                if
                you consecutively use this skill.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Tumble Rate +25%</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power +250</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicImpactWeapon" onchange="calcMagicImpactValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicImpactLevel" onchange="calcMagicImpactValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <div id="impactCSPDInput" style="display: none;">
              <span class="sub-title"><b>Cast Speed:</b></span>
              <input type="number" style="width: 6em; text-align: right" value="0" id="magicImpactCSPD"
                onchange="calcMagicImpactValues()"><br>
            </div>
            <span class="sub-title"><b>Magic: Impact buff is active:</b></span>
            <input type="checkbox" id="magicImpactBuff" onchange="calcMagicImpactValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicImpactChain" onchange="calcMagicImpactValues()"><br>
            <div id="magicImpactChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicImpactChainLevel" onchange="calcMagicImpactValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicImpactChainStackInput" style="display: none;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mImpactChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicImpactValues()">
            </div>
            <br>
            <span id="magicImpactValues">
              <li><b>Skill Constant: </b> 200</li>
              <li><b>Skill Multiplier:</b> 2.5</li><br>
              <li><b>Instant Cast</b> without <b>Cast Time</b></li>
              <li><b>Hit Range (radius):</b> 3m, around the <b>caster</b></li>
              <li>Grant <b>Magic: Impact buff</b> upon cast</li>
              <li><b>Tumble Chance:</b> 90%</li>
              <li><b>Tumble Duration:</b> 3 seconds</li>
              <li><b>Resistance Duration on Difficulties:</b> 6 seconds (<b>Easy</b> and <b>Normal</b>); 9 seconds
                (<b>Hard</b>); 15 seconds (<b>Nightmare</b>); 21 seconds (<b>Ultimate</b>)</li><br><b>Buff Effects:</b>
              <li>The next <b>skill</b> has its <b>MP Cost halved</b>, rounded up to the nearest multiple of 100</li>
              <li>This skill has <b>reduced Skill Multiplier and Tumble Chance</b>, and <b>weapon bonuses of this skill
                  are
                  disabled</b> while the buff is active</li>
              <li><b>Buff Duration:</b> Until a skill is used</li><br><b>Extra info:</b>
              <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most
                ailments have the same resistance duration as their own duration, unless stated otherwise</li>
              <li>This skill's cast motion is changed after reaching skill level 7</li><br>The bonus of <b>Main
                Weapon</b>
              overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function castSpeedCheck(level, impactCSPDSection) {
                if (level < 7) { impactCSPDSection.style = "display: block" }
                else { impactCSPDSection.style = "display: none" }
              }

              function chainCastCheck(chainCast, chainCastDiv) {
                if (chainCast) { chainCastDiv.style = "display: block" }
                else { chainCastDiv.style = "display: none" }
              }

              function weaponChainStackCheckImpact(level, weapon, ccStackSection) {
                if (level < 3 && (weapon == "Staff" || weapon == "MD")) { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcMagicImpactConstant(level, result) {
                var constant = 100 + level * 10
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}</li>`
              }

              function calcMagicImpactMultiplier(level, weapon, buff, result) {
                if (buff) { var multiplier = 0.1 * level }
                else {
                  var multiplier = 0.25 * level
                  if (weapon == "MD" || weapon == "SubMD") { multiplier += 2.5 }
                }
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}</li><br>`
              }

              function calcMagicImpactCastTime(level, weapon, CSPD, chainCast, chainCastLevel, ccStack, result) {
                var baseCastTime = 2 - Math.floor((level * 1 + 1) / 4)
                if (level < 3 && (weapon == "Staff" || weapon == "MD")) { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD);
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = ``
                if (level < 7) {
                  HTML = `<li><b>Cast Time:</b> ${castTime} second`
                  if (castTime != 1) { HTML += `s` }
                  HTML += `</li>`
                }
                else { HTML = `<li><b>Instant Cast</b> without <b>Cast Time</b></li>` }
                result.innerHTML += HTML
              }

              function calcMagicImpactMotionSpeed(level, CSPD, chainCast, chainCastLevel, result) {
                var levelCastTime = Math.ceil(0.5 + 0.25 * level)
                var noCSPDCastTime = 3 - levelCastTime;
                var castTime = calcCastTime(noCSPDCastTime, CSPD);
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed of Magic: Impact</b> +${motionSpeed}%</li>` }
              }

              function addMagicImpactHitRange(result) {
                result.innerHTML += `<li><b>Hit Range (radius):</b> 3m, around the <b>caster</b></li>
    <li>Grant <b>Magic: Impact buff</b> upon cast</li>`
              }

              function calcMagicImpactTumbleChance(level, weapon, buff, result) {
                var chance = 0
                if (buff) { chance += 1 * level }
                else {
                  chance += 15 + 5 * level
                  if (weapon == "Staff") { chance += 25 }
                }
                result.innerHTML += `<li><b>Tumble Chance:</b> ${chance}%</li>
    <li><b>Tumble Duration:</b> 3 seconds</li>
    <li><b>Resistance Duration on Difficulties:</b> 6 seconds (<b>Easy</b> and <b>Normal</b>); 9 seconds (<b>Hard</b>); 15 seconds (<b>Nightmare</b>); 21 seconds (<b>Ultimate</b>)</li>`
              }

              function addMagicImpactBuffEffect(result) {
                result.innerHTML += `<br><b>Buff Effects:</b>
    <li>The next <b>skill</b> has its <b>MP Cost halved</b>, rounded up to the nearest multiple of 100</li>
    <li>This skill has <b>reduced Skill Multiplier and Tumble Chance</b>, and <b>weapon bonuses of this skill are disabled</b> while the buff is active</li>
    <li><b>Buff Duration:</b> Until a skill is used</li>`
              }

              function addMagicImpactExtraInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
      <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most ailments have the same resistance duration as their own duration, unless stated otherwise</li>
      <li>This skill's cast motion is changed after reaching skill level 7</li>`
              }

              function calcMagicImpactValues() {
                var weaponSelector = document.getElementById("magicImpactWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicImpactLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var impactCSPDSection = document.getElementById("impactCSPDInput")
                var CSPD = document.getElementById("magicImpactCSPD").value
                var buff = document.getElementById("magicImpactBuff").checked
                var chainCast = document.getElementById("magicImpactChain").checked
                var chainCastDiv = document.getElementById("magicImpactChainActive")
                var chainCastSelector = document.getElementById("magicImpactChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var ccStackSection = document.getElementById("magicImpactChainStackInput")
                var ccStack = document.getElementById("mImpactChainStack").value
                var result = document.getElementById("magicImpactValues")
                castSpeedCheck(level, impactCSPDSection)
                chainCastCheck(chainCast, chainCastDiv)
                weaponChainStackCheckImpact(level, weapon, ccStackSection)
                calcMagicImpactConstant(level, result)
                calcMagicImpactMultiplier(level, weapon, buff, result)
                calcMagicImpactCastTime(level, weapon, CSPD, chainCast, chainCastLevel, ccStack, result)
                calcMagicImpactMotionSpeed(level, CSPD, chainCast, chainCastLevel, result)
                addMagicImpactHitRange(result)
                calcMagicImpactTumbleChance(level, weapon, buff, result)
                addMagicImpactBuffEffect(result)
                addMagicImpactExtraInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }
              calcMagicImpactValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/finale.png" width="34" height="34">
                Magic: Finale
              </p>
              <p class="medium">
                Skill Magic: Finale Level 4 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>1600</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>12</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Super wide area of effect. Deal greater damage to enemies near the center. Cast Time is long and unable
                to
                reduce it by CSPD. Generate Aggro while casting.<br><br>
                <b>Magic: Finale is unaffected by [Chain Cast]</b><br><br>
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +750<br> Power increases depending on INT.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power increases depending on INT.<br> 4x Range (Radius) for 1st HIT<br> 2x Range (Radius) for 2nd and
                3rd
                HIT
              </p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="finaleWeapon" onchange="calcFinaleValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="finaleLevel" onchange="calcFinaleValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="finaleCSPD"
              onchange="calcFinaleValues()"><br>
            <div id="finaleIntInput" style="display: block;">
              <span class="sub-title"> <b>Base INT:</b></span>
              <input type="number" value="255" min="1" id="finaleIntValue" onchange="calcFinaleValues()"
                style="width: 50px;">
            </div>
            <br>
            <span id="finaleValues">
              <li><b>Skill Constant (First Hit): </b> 3000 </li>
              <li><b>Skill Constant (Second Hit): </b> 300 </li>
              <li><b>Skill Constant (Third Hit): </b> 30 </li>
              <li><b>Skill Multiplier (First Hit): </b> 40.05</li>
              <li><b>Skill Multiplier (Second Hit): </b> 20</li>
              <li><b>Skill Multiplier (Third Hit): </b> 10</li>
              <li><b>Hit Count:</b> 3 hits (if within <b>1st Hit's Range</b>); 2 hits (if within <b>2nd Hit's Range</b>
                but
                <b>not 1st Hit's</b>); 1 hit (if within <b>3rd Hit's Range</b> but <b>not the others'</b>); damage
                calculation
                is done for each hit
              </li><br>
              <li><b>Cast Time:</b> 3 seconds (unaffected by CSPD)</li>
              <li><b>Hit Range (radius):</b> 0.5m for the <b>1st Hit</b>; 4m for the <b>2nd Hit</b>; 10m for the <b>3rd
                  Hit</b>; around the <b>main target's position when the cast time ends</b></li>
              <li><b>Total Cast-Time-Aggro on the main target: </b> 3000 (affected by CSPD)</li>
              (Note: This is the official aggro value by <b>Asobimo</b>. Please check out <a
                href="https://youtu.be/38C8513vj54?t=218" style="color:blue;"><b>Joji Torai's tests about aggro</b></a>
              for
              more detail)<br><br><b>Extra info:</b>
              <li><b>On the main target only</b>, Total Aggro is separated into 2 parts: <b>Cast-Time-Aggro</b> and
                <b>On-Hit-Aggro</b>:
                <ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Cast-Time-Aggro:</b> Generates 1000 aggro <b>per second of cast time</b>.
                    This
                    part is <b>unaffected by any Aggro Modifiers</b> (Sneak Attack, ±Aggro% stats), but is instead
                    <b>affected
                      by CSPD</b>
                  </li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>On-Hit-Aggro:</b> The remaining aggro after substracting Cast-Time-Aggro,
                    and
                    is
                    generated on hit. This part is <b>affected by Aggro Modifiers</b></li>
                </ul>
              </li>
              <li>Total Aggro generated <b>on other targets</b> works normally</li>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li><br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                castTime = Math.ceil(castTime * 100) / 100
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function weaponIntCheck(weapon, intSection) {
                if (weapon != "Other") { intSection.style = "display: block" }
                else { intSection.style = "display: none" }
              }

              function calcFinaleConstant(level, result) {
                var constant1 = 300 * level
                var constant2 = 30 * level
                var constant3 = 3 * level
                result.innerHTML = `<li><b>Skill Constant (First Hit): </b> ${constant1} </li>
      <li><b>Skill Constant (Second Hit): </b> ${constant2} </li>
      <li><b>Skill Constant (Third Hit): </b> ${constant3} </li>`
              }

              function calcFinaleMultiplier(weapon, intValue, result) {
                var multiplier1 = 30
                var multiplier2 = 20
                var multiplier3 = 10

                if (weapon == "Staff") { multiplier1 += 7.5 + intValue / 100 }
                else if (weapon == "MD") { multiplier1 += intValue / 100 }
                multiplier1 = Math.round(multiplier1 * 100) / 100

                result.innerHTML += `<li><b>Skill Multiplier (First Hit): </b> ${multiplier1}</li>
      <li><b>Skill Multiplier (Second Hit): </b> ${multiplier2}</li>
      <li><b>Skill Multiplier (Third Hit): </b> ${multiplier3}</li>
      <li><b>Hit Count:</b> 3 hits (if within <b>1st Hit's Range</b>); 2 hits (if within <b>2nd Hit's Range</b> but <b>not 1st Hit's</b>); 1 hit (if within <b>3rd Hit's Range</b> but <b>not the others'</b>); damage calculation is done for each hit</li><br>`
              }

              function calcFinaleCast(level, result) {
                var castTime = 13 - level
                result.innerHTML += `<li><b>Cast Time:</b> ${castTime} seconds (unaffected by CSPD)</li>`
              }

              function calcFinaleHitRange(weapon, result) {
                var radius1 = 0.5
                var radius2 = 4
                var radius3 = 10
                if (weapon == "MD") { radius1 *= 4; radius2 *= 2; radius3 *= 2 }
                result.innerHTML += `<li><b>Hit Range (radius):</b> ${radius1}m for the <b>1st Hit</b>; ${radius2}m for the <b>2nd Hit</b>; ${radius3}m for the <b>3rd Hit</b>; around the <b>main target's position when the cast time ends</li>`
              }

              function calcFinaleAPS(level, CSPD, result) {
                var APS = (13 - level) * 1000
                var modifier = calcCastTime(1, CSPD)
                APS *= Math.min(1, modifier)
                result.innerHTML += `<li><b>Total Cast-Time-Aggro on the main target: </b> ${APS} (affected by CSPD)</li>
      (Note: This is the official aggro value by <b>Asobimo</b>. Please check out <a href="https://youtu.be/38C8513vj54?t=218" style="color:blue;"><b>Joji Torai's tests about aggro</b></a> for more detail)<br><br>`
              }

              function addFinaleAggroInfo(result) {
                result.innerHTML += `<b>Extra info:</b>
      <li><b>On the main target only</b>, Total Aggro is separated into 2 parts: <b>Cast-Time-Aggro</b> and <b>On-Hit-Aggro</b>:
      <ul><li>&nbsp&nbsp&nbsp- <b>Cast-Time-Aggro:</b> Generates 1000 aggro <b>per second of cast time</b>. This part is <b>unaffected by any Aggro Modifiers</b> (Sneak Attack, ±Aggro% stats), but is instead <b>affected by CSPD</b></li>
      <li>&nbsp&nbsp&nbsp- <b>On-Hit-Aggro:</b> The remaining aggro after substracting Cast-Time-Aggro, and is generated on hit. This part is <b>affected by Aggro Modifiers</b></li>
      </ul></li>
      <li>Total Aggro generated <b>on other targets</b> works normally</li>
      <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>`
              }

              function calcFinaleValues() {
                var weaponSelector = document.getElementById("finaleWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("finaleLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var CSPD = document.getElementById("finaleCSPD").value
                var intSection = document.getElementById("finaleIntInput")
                var intValue = document.getElementById("finaleIntValue").value
                var result = document.getElementById("finaleValues")
                weaponIntCheck(weapon, intSection)
                calcFinaleConstant(level, result)
                calcFinaleMultiplier(weapon, intValue, result)
                calcFinaleCast(level, result)
                calcFinaleHitRange(weapon, result)
                calcFinaleAPS(level, CSPD, result)
                addFinaleAggroInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcFinaleValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">
        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/chronosshift.png" width="34" height="34">
                Chronos Shift
              </p>
              <p class="medium">
                Skill Chronos Shift Level 5 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/md-main.png"><br>Main MD only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>0</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>No</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>No</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>A forbidden technique of turning back time and deploying magic again. Instantly reactivates the last
                magic
                skill used. <font style="color:#009fff">After using this skill, you need to wait for some time to be
                  able
                  to
                  use it again.</font><br></p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="chronosShiftSkillLevel" onchange="calcChronosShiftValue()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <br>
            <span id="chronosShiftValue"><b>Skill Effect:</b>
              <li>Upon using an <b>active skill</b> from <b>Magic Skills</b> tree, gains <b>Chronos Shift buff</b> that
                acts
                as an indicator of that skill being "saved/copied"; the buff will be "overwritten" when another skill
                from
                <b>Magic Skills</b> tree is used, and lasts until <b>Chronos Shift</b> is used
              </li>
              <li>Upon casting this skill, consumes the buff to <b>cast a copy of the last Magic Skill used</b>
                <ul>
                  <li>&nbsp;&nbsp;&nbsp;- The copy has <b>all of its indices &amp; characteristics (constant,
                      multiplier,
                      range,...) being exactly the same as the original skill when that skill is cast</b>, with the only
                    exceptions being <b>Cast Time</b> (being set to 0), <b>Cast Motion</b> (uses that of Chronos Shift
                    instead) and <b>Combo tag effects other than MP Cost Reduction</b> (being ignored)</li>
                  <li>&nbsp;&nbsp;&nbsp;- The MP Cost of this skill is equal to the <b>final MP Cost</b> of the copied
                    skill,
                    which means MP Cost modifiers from combo tags (Consecutive,...) and buffs (Magic: Impact,...) are
                    included; cannot be activated if your MP is not enough to use this skill</li>
                </ul>
              </li>
              <li>After using this skill, it will enter a cooldown of 6 seconds, during which this skill can neither be
                reactivated nor "save" any skill</li><br><b>Extra info:</b>
              <li>The copy is treated as <b>being the same as the original skill</b>, since casting the copy of a
                "lingering"
                skill (such as Magic: Wall or Magic: Storm) will actually ends that skill prematurely, as if you recast
                that
                skill instead of casting its copy via <b>Chronos Shift</b></li>
              <li>The copy <b>cannot give Magic: Burst stack</b> nor <b>charge Magic: Magic Cannon</b></li>
              <li>The copy of <b>Magic: Arrows</b> can grant <b>Chain Cast buff</b></li>
            </span>

            <script>
              function calcChronosShiftSkillEffect(level, result) {
                //var hpCost = (110 - 10 * level)/100
                var cooldown = 16 - level * 1
                result.innerHTML = `<b>Skill Effect:</b>
      <li>Upon using an <b>active skill</b> from <b>Magic Skills</b> tree, gains <b>Chronos Shift buff</b> that acts as an indicator of that skill being "saved/copied"; the buff will be "overwritten" when another skill from <b>Magic Skills</b> tree is used, and lasts until <b>Chronos Shift</b> is used</li>
      <li>Upon casting this skill, consumes the buff to <b>cast a copy of the last Magic Skill used</b><ul>
      <li>&nbsp&nbsp&nbsp- The copy has <b>all of its indices & characteristics (constant, multiplier, range,...) being exactly the same as the original skill when that skill is cast</b>, with the only exceptions being <b>Cast Time</b> (being set to 0), <b>Cast Motion</b> (uses that of Chronos Shift instead) and <b>Combo tag effects other than MP Cost Reduction</b> (being ignored)</li>
      <li>&nbsp&nbsp&nbsp- The MP Cost of this skill is equal to the <b>final MP Cost</b> of the copied skill, which means MP Cost modifiers from combo tags (Consecutive,...) and buffs (Magic: Impact,...) are included; cannot be activated if your MP is not enough to use this skill</li>
      </ul></li>
      <li>After using this skill, it will enter a cooldown of ${cooldown} seconds, during which this skill can neither be reactivated nor "save" any skill</li>`
                //Keep this just in case there's "new registlet": <li style = 'color: #C70039'>If you die by this skill's effect, <b>Revive Droplet</b> and <b>Struggle</b> will be <b>disabled</b>, and <b>revive time reduction effects</b> of skills (such as First Aid, Heal, Mini Heal,...) will also be negated; <b>Play Dead</b> and <b>Revive Time Reduction stat</b> are still applied, however</li>
              }

              function addChronosShiftExtraInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
      <li>The copy is treated as <b>being the same as the original skill</b>, since casting the copy of a "lingering" skill (such as Magic: Wall or Magic: Storm) will actually ends that skill prematurely, as if you recast that skill instead of casting its copy via <b>Chronos Shift</b></li>
      <li>The copy <b>cannot give Magic: Burst stack</b> nor <b>charge Magic: Magic Cannon</b></li>
      <li>The copy of <b>Magic: Arrows</b> can grant <b>Chain Cast buff</b></li>`
              }

              function calcChronosShiftValue() {
                let levelSelector = document.getElementById("chronosShiftSkillLevel")
                let level = levelSelector[levelSelector.selectedIndex].value
                let result = document.getElementById("chronosShiftValue")
                calcChronosShiftSkillEffect(level, result)
                addChronosShiftExtraInfo(result)
              }

              calcChronosShiftValue()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/wall.png" width="34" height="34">
                Magic: Wall
              </p>
              <p class="medium">
                Skill Magic: Wall Level 2 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>200</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>24</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Create a magic wall at the feet. Deal damage and knock back enemies.
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +30</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Range (Radius) +1m</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="wallWeapon" onchange="calcWallValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="wallLevel" onchange="calcWallValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>"Magic: Wall Enhancer" Registlet Level:</b></span>
            <select id="wallRegistlet" onchange="calcWallValues()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
              <option value="11">11</option>
              <option value="12">12</option>
              <option value="13">13</option>
              <option value="14">14</option>
              <option value="15">15</option>
              <option value="16">16</option>
              <option value="17">17</option>
              <option value="18">18</option>
              <option value="19">19</option>
              <option value="20">20</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="wallCSPD"
              onchange="calcWallValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="wallChain" onchange="calcWallValues()"><br>
            <div id="wallChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="wallChainLevel" onchange="calcWallValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <br>
            <span id="wallValues">
              <li><b>Skill Constant: </b> 120; constant for each hit</li>
              <li><b>Skill Multiplier:</b> 1.5; multiplier for each hit</li>
              <li><b>Hit Count :</b> 10 hits; damage calculation is done for each hit</li><br>
              <li><b>Cast Time:</b> 1 second (affected by CSPD)</li>
              <li><b>Hit Range :</b> 2m, around the <b>caster's position on cast</b></li>
              <li><b>Knockback Chance:</b> 100%; only on targets the caster has aggro on</li>
              <li><b>Knockback Distance:</b> 5m; halved on <b>bosses</b></li>
              <li><b>Resistance Duration:</b> 1.8 seconds</li><br><b>Extra info:</b>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li>If <b>Magic: Wall</b> is recast while the previous <b>Magic: Wall</b> is still active, the latter will
                be
                removed and all of its remaining hits will be canceled</li>
              <li><b>Magic: Wall</b> name and effect animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Wall</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Fire Wall</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Aqua Screen</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Gale Zone</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Earthquake</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Holy Wall</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Evil Gate</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function calcWallConstant(level, result) {
                var constant = 100 + level * 2
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}; constant for each hit</li>`
              }

              function calcWallMultiplier(level, weapon, registlet, result) {
                var multiplier = 0.8 + 0.04 * level + registlet * 0.05
                if (weapon == "Staff") { multiplier += 0.3 }
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}; multiplier for each hit</li>`
              }

              function calcWallHitCount(level, result) {
                var hitCount = 5 + Math.floor(level / 2)
                result.innerHTML += `<li><b>Hit Count :</b> ${hitCount} hits; damage calculation is done for each hit</li><br>`
              }

              function calcWallCastTime(CSPD, chainCast, chainCastLevel, result) {
                var castTime = calcCastTime(1, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcWallMotionSpeed(CSPD, chainCast, chainCastLevel, result) {
                //Only applies if there's no cast time
                var castTime = calcCastTime(1, CSPD);
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Wall</b> +${motionSpeed}%</li>` }
              }

              function calcWallHitRange(level, weapon, result) {
                var hitRange = 2
                if (weapon == "MD") { hitRange += 1 }
                result.innerHTML += `<li><b>Hit Range :</b> ${hitRange}m, around the <b>caster's position on cast</b></li>`
              }

              function addWallKnockBack(result) {
                result.innerHTML += `<li><b>Knockback Chance:</b> 100%; only on targets the caster has aggro on</li>
      <li><b>Knockback Distance:</b> 5m; halved on <b>bosses</b></li>
      <li><b>Resistance Duration:</b> 1.8 seconds</li>`
              }

              function addWallPlacedInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>If <b>Magic: Wall</b> is recast while the previous <b>Magic: Wall</b> is still active, the latter will be removed and all of its remaining hits will be canceled</li>
    <li><b>Magic: Wall</b> name and effect animation will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Wall</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Fire Wall</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Aqua Screen</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Gale Zone</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Earthquake</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Holy Wall</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Evil Gate</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcWallValues() {
                var weaponSelector = document.getElementById("wallWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("wallLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var registletSelector = document.getElementById("wallRegistlet");
                var registlet = registletSelector[registletSelector.selectedIndex].value;
                var CSPD = document.getElementById("wallCSPD").value;
                var chainCast = document.getElementById("wallChain").checked;
                var chainCastSection = document.getElementById("wallChainActive");
                var chainCastSelector = document.getElementById("wallChainLevel");
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value;
                var result = document.getElementById("wallValues")
                chainCastCheck(chainCast, chainCastSection)
                calcWallConstant(level, result)
                calcWallMultiplier(level, weapon, registlet, result)
                calcWallHitCount(level, result)
                calcWallCastTime(CSPD, chainCast, chainCastLevel, result)
                calcWallMotionSpeed(CSPD, chainCast, chainCastLevel, result)
                calcWallHitRange(level, weapon, result)
                addWallKnockBack(result)
                addWallPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcWallValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/blast.png" width="34" height="34">
                Magic: Blast
              </p>
              <p class="medium">
                Skill Magic: Blast Level 2 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>300</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Set off a blast by concentrating magic power. Chance to inflict a status ailment. The status ailment
                depends
                on the element.<br><br>
                <b>Element: [Ailment]</b><br>
                •Neutral: [Flinch]<br>
                •Fire:[Ignite]<br>
                •Water:[Freeze]<br>
                •Wind:[Blind]<br>
                •Earth:[Slow]<br>
                •Light:[Dizzy]<br>
                •Dark:[Fear]<br><br>
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +150<br> Power increases depending on INT.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power increases depending on INT.<br> Status Ailment Rate +50%<br> Range (Radius) +2m</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicBlastWeapon" onchange="calcMagicBlastValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicBlastLevel" onchange="calcMagicBlastValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Main Weapon's Element:</b></span>
            <select id="magicBlastElement" onchange="calcMagicBlastValues()">
              <option value="Neutral" selected="">Neutral</option>
              <option value="Fire">Fire</option>
              <option value="Water">Water</option>
              <option value="Wind">Wind</option>
              <option value="Earth">Earth</option>
              <option value="Light">Light</option>
              <option value="Dark">Dark</option>
            </select><br>
            <span class="sub-title"><b>"Magic: Blast Catalyst" Registlet Level:</b></span>
            <select id="magicBlastRegistlet" onchange="calcMagicBlastValues()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
            </select><br>
            <div id="blastIntInput" style="display: block;">
              <span class="sub-title"><b>Total INT:</b></span>
              <input type="number" id="blastINT" value="1" style="width: 4em; text-align: right"
                onchange="calcMagicBlastValues()"><br>
            </div>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicBlastCSPD"
              onchange="calcMagicBlastValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicBlastChain" onchange="calcMagicBlastValues()"><br>
            <div id="magicBlastChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicBlastChainLevel" onchange="calcMagicBlastValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicBlastChainStackInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mBlastChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicBlastValues()">
            </div>
            <br>
            <span id="magicBlastValues">
              <li><b>Skill Constant: </b> 380</li>
              <li><b>Skill Multiplier:</b> 11.5</li><br>
              <li><b>Cast Time:</b> 4 seconds (affected by CSPD)</li>
              <li><b>Hit Range (radius):</b> 2m, around the <b>main target's position when the skill is cast</b></li>
              <li><b>Flinch Chance:</b> 50%</li>
              <li><b>Flinch Duration:</b> 2 seconds</li>
              <li><b>Resistance Duration on Difficulties:</b> 7 seconds (<b>Easy</b>, <b>Normal</b> and <b>Hard</b>); 8
                seconds (<b>Nightmare</b>); 11 seconds (<b>Ultimate</b>)</li><br><b>Extra info:</b>
              <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most
                ailments have the same resistance duration as their own duration, unless stated otherwise</li>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li><b>Magic: Blast</b> name and effect animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Blast</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Explosion</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Absolute Zero</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Aero Blast</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Geo Impact</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Shining Blast</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Evil Blast</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function weaponIntCheck(weapon, intSection) {
                if (weapon != "Other") { intSection.style = "display: block" }
                else { intSection.style = "display: none" }
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function weaponChainStackCheck(weapon, ccStackSection) {
                if (weapon == "Staff" || weapon == "MD") { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcMagicBlastConstant(level, result) {
                var constant = 180 + 20 * level
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}</li>`
              }

              function calcMagicBlastMultiplier(level, weapon, blastINT, result) {
                var multiplier = 7 + 0.3 * level
                if (weapon != "Other") { multiplier += blastINT / 500 }
                if (weapon == "Staff") { multiplier += 1.5 }
                if (multiplier - Math.floor(multiplier * 100) / 100 < 0.00999999) { multiplier = Math.floor(multiplier * 100) / 100 }
                else { multiplier = Math.round(multiplier * 100) / 100 }
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}</li><br>`
              }

              function calcMagicBlastCastTime(weapon, CSPD, chainCast, chainCastLevel, registlet, ccStack, result) {
                var baseCastTime = 4 - (0.2 * registlet)
                if (weapon == "Staff" || weapon == "MD") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcMagicBlastMotionSpeed(CSPD, chainCast, chainCastLevel, registlet, result) {
                //Only applies if there's no cast time
                var baseCastTime = 4 - (0.2 * registlet)
                var castTime = calcCastTime(baseCastTime, CSPD);
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Blast</b> +${motionSpeed}%</li>` }
              }

              function calcBlastRange(level, weapon, result) {
                var range = 2
                if (weapon == "MD" || weapon == "SubMD") { range += 2 }
                result.innerHTML += `<li><b>Hit Range (radius):</b> ${range}m, around the <b>main target's position when the skill is cast</b></li>`
              }

              function calcBlastAilmentChance(level, weapon, element, result) {
                const elementToAilmentArray = { Neutral: "Flinch", Fire: "Ignite", Water: "Freeze", Wind: "Blind", Earth: "Slow", Light: "Dizzy", Dark: "Fear" }
                var chance = 5 * level
                if (weapon == "MD" || weapon == "SubMD") { chance += 50 }
                var duration
                if (element == "Neutral") { duration = 2 }
                else { duration = 10 }

                var HTML = `<li><b>${elementToAilmentArray[element]} Chance:</b> ${chance}%</li>
    <li><b>${elementToAilmentArray[element]} Duration:</b> ${duration} seconds</li>`
                if (element == "Neutral") { HTML += `<li><b>Resistance Duration on Difficulties:</b> 7 seconds (<b>Easy</b>, <b>Normal</b> and <b>Hard</b>); 8 seconds (<b>Nightmare</b>); 11 seconds (<b>Ultimate</b>)</li>` }
                result.innerHTML += HTML
              }

              function addMagicBlastPlacedInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li><b>Ailment Resistance Duration</b> starts upon successfully inflicting the corresponding ailment; most ailments have the same resistance duration as their own duration, unless stated otherwise</li>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li><b>Magic: Blast</b> name and effect animation will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Blast</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Explosion</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Absolute Zero</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Aero Blast</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Geo Impact</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Shining Blast</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Evil Blast</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicBlastValues() {
                var weaponSelector = document.getElementById("magicBlastWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicBlastLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var elementSelector = document.getElementById("magicBlastElement")
                var element = elementSelector[elementSelector.selectedIndex].value
                var registletSelector = document.getElementById("magicBlastRegistlet")
                var registlet = registletSelector[registletSelector.selectedIndex].value
                var blastINT = document.getElementById("blastINT").value
                var intSection = document.getElementById("blastIntInput")
                var CSPD = document.getElementById("magicBlastCSPD").value
                var chainCast = document.getElementById("magicBlastChain").checked
                var chainCastSection = document.getElementById("magicBlastChainActive")
                var chainCastSelector = document.getElementById("magicBlastChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var ccStackSection = document.getElementById("magicBlastChainStackInput")
                var ccStack = document.getElementById("mBlastChainStack").value
                var result = document.getElementById("magicBlastValues")
                weaponIntCheck(weapon, intSection)
                chainCastCheck(chainCast, chainCastSection)
                weaponChainStackCheck(weapon, ccStackSection)
                calcMagicBlastConstant(level, result)
                calcMagicBlastMultiplier(level, weapon, blastINT, result)
                calcMagicBlastCastTime(weapon, CSPD, chainCast, chainCastLevel, registlet, ccStack, result)
                calcMagicBlastMotionSpeed(CSPD, chainCast, chainCastLevel, registlet, result)
                calcBlastRange(level, weapon, result)
                calcBlastAilmentChance(level, weapon, element, result)
                addMagicBlastPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicBlastValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/storm.png" width="34" height="34">
                Magic: Storm
              </p>
              <p class="medium">
                Skill Magic: Storm Level 3 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>400</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>A magic to generate a storm. Enemies will be sucked into it. Strong monsters may not be sucked into it.
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +100</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Range (Radius) +2m</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicStormWeapon" onchange="calcMagicStormValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicStormLevel" onchange="calcMagicStormValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicStormCSPD"
              onchange="calcMagicStormValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="stormChain" onchange="calcMagicStormValues()"><br>
            <div id="stormChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="stormChainLevel" onchange="calcMagicStormValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <br>
            <span id="stormValues">
              <li><b>Skill Constant: </b> 400; constant for each hit</li>
              <li><b>Skill Multiplier:</b> 3; multiplier for each hit</li>
              <li><b>Hit Count :</b> 6 hits; damage calculation is done for each hit</li><br>
              <li><b>Cast Time:</b> 1 second (affected by CSPD)</li>
              <li><b>Hit Range (radius):</b> 3.75m, around the <b>main target's position when the skill is cast</b></li>
              <li><b>Suction Chance:</b> 100%; halved on <b>bosses</b></li>
              <li><b>Suction Duration:</b> 1 second</li><br><b>Extra info:</b>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li>If <b>Magic: Storm</b> is recast while the previous <b>Magic: Storm</b> is still active, the latter
                will
                be
                removed and all of its remaining hits will be canceled</li>
              <li><b>Magic: Storm</b> name will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Storm</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Fire Storm</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Frozen Cyclone</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Thunder Storm</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Sandstorm</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Lux Vortex</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Evil Tempest</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function calcStormConstant(level, result) {
                var constant = 400 //50 + 3*level
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}; constant for each hit</li>`
              }

              function calcStormMultiplier(level, weapon, result) {
                var multiplier = 1.8 + 0.02 * level
                if (weapon == "Staff") { multiplier += 1 }
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}; multiplier for each hit</li>`
              }

              function calcStormHitCount(level, result) {
                var hitCount = Math.floor(1 + 0.5 * level)
                var HTML = `<li><b>Hit Count :</b> ${hitCount} hit`
                if (hitCount != 1) { HTML += `s; damage calculation is done for each hit` }
                HTML += `</li><br>`
                result.innerHTML += HTML
              }

              function calcStormCastTime(CSPD, chainCast, chainCastLevel, result) {
                var castTime = calcCastTime(1, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcStormMotionSpeed(CSPD, chainCast, chainCastLevel, result) {
                var castTime = calcCastTime(1, CSPD);
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Storm</b> +${motionSpeed}%</li>` }
              }

              function calcStormRange(level, weapon, result) {
                var hitRange = 1.75 + Math.floor(level / 4)
                if (weapon == "MD") { hitRange += 2 }
                result.innerHTML += `<li><b>Hit Range (radius):</b> ${hitRange}m, around the <b>main target's position when the skill is cast</b></li>`
              }

              function addStormSuction(result) {
                result.innerHTML += `<li><b>Suction Chance:</b> 100%; halved on <b>bosses</b></li>
      <li><b>Suction Duration:</b> 1 second</li>`
              }

              function addStormPlacedInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>If <b>Magic: Storm</b> is recast while the previous <b>Magic: Storm</b> is still active, the latter will be removed and all of its remaining hits will be canceled</li>
    <li><b>Magic: Storm</b> name will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Storm</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Fire Storm</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Frozen Cyclone</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Thunder Storm</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Sandstorm</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Lux Vortex</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Evil Tempest</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicStormValues() {
                var weaponSelector = document.getElementById("magicStormWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicStormLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var CSPD = document.getElementById("magicStormCSPD").value;
                var chainCast = document.getElementById("stormChain").checked
                var chainCastSection = document.getElementById("stormChainActive")
                var chainCastSelector = document.getElementById("stormChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var result = document.getElementById("stormValues")
                chainCastCheck(chainCast, chainCastSection)
                calcStormConstant(level, result)
                calcStormMultiplier(level, weapon, result)
                calcStormHitCount(level, result)
                calcStormCastTime(CSPD, chainCast, chainCastLevel, result)
                calcStormMotionSpeed(CSPD, chainCast, chainCastLevel, result)
                calcStormRange(level, weapon, result)
                addStormSuction(result)
                addStormPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicStormValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/burst.png" width="34" height="34">
                Magic: Burst
              </p>
              <p class="medium">
                Skill Magic: Burst Level 4 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>500</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Releases enhanced magic power. Becomes invincible as the skill activates. May Knock Back monsters
                except
                bosses. Using Magic Skills shortens its Cast Time.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power increases depending on INT.<br>
                Invincibility duration increases.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power increases depending on INT.<br>
                Max Attack Range increases depending on the skill level.<br><br>
                Invincibility duration increases if <b style="color: gold">Main: Magic Device</b></p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicBurstWeapon" onchange="calcMagicBurstValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicBurstLevel" onchange="calcMagicBurstValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <div id="magicBurstIntInput" style="display: block;">
              <span class="sub-title"> <b>Base INT:</b></span>
              <input type="number" value="255" min="1" id="magicBurstIntValue" onchange="calcMagicBurstValues()"
                style="width: 50px;">
            </div>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicBurstCSPD"
              onchange="calcMagicBurstValues()"><br>
            <span class="sub-title"><b>Magic: Burst stack count:</b></span>
            <input type="number" id="mBurstStack" min="0" max="8" value="0" style="width: 3em"
              onchange="calcMagicBurstValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="magicBurstChain" onchange="calcMagicBurstValues()"><br>
            <div id="magicBurstChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="magicBurstChainLevel" onchange="calcMagicBurstValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicBurstStaffMdInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mBurstChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicBurstValues()"><br>
              <span class="sub-title"><b>Caster is inside "Enchanted Barriers" range:</b></span>
              <input type="checkbox" id="magicBurstEBarrier" onchange="calcMagicBurstValues()">
            </div>
            <br>
            <span id="magicBurstValues">
              <li><b>Skill Constant: </b> 500</li>
              <li><b>Skill Multiplier:</b> 23.55</li><br>
              <li><b>Cast Time:</b> 8 seconds (affected by CSPD)</li>
              <li><b>Hit Range:</b> Fan shape with radius of 13m and angle of 60°; in front of the <b>caster upon
                  cast</b>
              </li>
              <li><b>When the attack is released</b>, gains [Invincible] for 2 seconds</li>
              <li><b>Knockback Chance:</b> 100%; unavailable on <b>bosses</b></li>
              <li><b>Knockback Distance:</b> 15m - 2×[target's size in in-game meters]</li>
              <li><b>Resistance Duration:</b> 1 second for every 1m knockback distance</li><br><b>Buff Effect:</b>
              <li>Gains 1 stack each time <b>another attacking skill from Magic Skills Tree</b> is cast; can stack up to
                a
                maximum of <b>8 stacks</b></li>
              <li>Upon casting this skill, <b>consumes all stacks</b> to decrease the <b>Total Cast Time</b> of this
                skill
                by
                1 second for each stack; this is applied <b>after CSPD stat and Chain Cast effect</b></li>
              <li><b>Buff Duration:</b> Until <b>Magic: Burst</b> is used</li><br><b>Extra info:</b>
              <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and
                <b>Long Range Damage</b> stats
              </li>
              <li>The change in maximum stack count represents the required stack count for zero cast time; if the
                required
                stack is 0, the buff will not appear at all<ul>
                  <li>&nbsp;&nbsp;&nbsp;- It used to be a fixed number, but since this skill always use up <b>all
                      stacks</b>,
                    any excessive stack will end up serving no purpose at all; this change thus only helps you know how
                    many
                    stacks are needed to reduce cast time to zero, and otherwise have no other impact</li>
                </ul>
              </li>
              <li><b>Magic: Burst</b> name and effect animation will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Burst</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Hell Inferno</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Eternal Blizzard</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Force Tempest</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Gravity Turn</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Punishment</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Eclipse</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function calcMaxStackBurst(weapon, CSPD, stackInput, ccStack) {
                var baseCastTime = 8
                if (weapon == "Staff" || weapon == "MD") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD)
                castTime = Math.ceil(castTime * 100) / 100
                if (castTime < 0) { castTime = 0 }
                var newMax = 8
                if (castTime - Math.ceil(castTime) < 0) { newMax = Math.ceil(castTime) }
                else { newMax = Math.floor(castTime) }
                var maxStack = Math.max(0, Math.min(8, newMax))
                if (stackInput.value > maxStack) { stackInput.value = maxStack }
                stackInput.max = maxStack
              }

              function weaponIntCheck(weapon, intSection) {
                if (weapon != "Other") { intSection.style = "display: block" }
                else { intSection.style = "display: none" }
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function weaponChainStackCheck(weapon, mBurstStaffMdSection) {
                if (weapon == "Staff" || weapon == "MD") { mBurstStaffMdSection.style = "display: block" }
                else { mBurstStaffMdSection.style = "display: none" }
              }

              function calcMagicBurstConstant(level, result) {
                var constant = 200 + 30 * level
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}</li>`
              }

              function calcMagicBurstMultiplier(level, weapon, intValue, result) {
                var multiplier = 15 + 0.6 * level
                if (weapon == "Staff") { multiplier += intValue / 100 }
                else if (weapon == "MD" || weapon == "SubMD") { multiplier += intValue / 200 }
                if (multiplier - Math.floor(multiplier * 100) / 100 < 0.00999999) { multiplier = Math.floor(multiplier * 100) / 100 }
                else { multiplier = Math.round(multiplier * 100) / 100 }
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}</li><br>`
              }

              function calcMagicBurstCastTime(weapon, CSPD, chainCast, chainCastLevel, stackCount, ccStack, result) {
                var baseCastTime = 8
                if (weapon == "Staff" || weapon == "MD") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD);
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime -= stackCount * 1
                castTime = Math.ceil(castTime * 100) / 100
                if (castTime < 0) { castTime = 0 }
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcMagicBurstMotionSpeed(CSPD, chainCast, chainCastLevel, stackCount, result) {
                var castTime = calcCastTime(8, CSPD);
                castTime -= stackCount * 1
                if (castTime < 0) { castTime = 0 }
                var motionSpeed = 0;
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Burst</b> +${motionSpeed} + "%</li>` }
              }

              function calcMagicBurstHitRange(level, weapon, result) {
                var radius = 8 + Math.max(0, level - 5)
                var angle = 40 + 2 * level
                if (weapon == "MD" || weapon == "SubMD") {
                  radius += Math.ceil(0.3 * level)
                  angle += 5 * Math.ceil(0.3 * level)
                }
                result.innerHTML += `<li><b>Hit Range:</b> Fan shape with radius of ${radius}m and angle of ${angle}°; in front of the <b>caster upon cast</b></li>`
              }

              function addBurstInvincible(weapon, result) {
                var HTML = `<li><b>When the attack is released</b>, gains [Invincible] for 2 seconds`
                if (weapon == "SubMD" || weapon == "Other") { HTML += ` OR until the skill ends` }
                HTML += `</li>`
                result.innerHTML += HTML
              }

              function calcBurstAilmentChance(level, result) {
                var ailmentChance = 10 * level
                result.innerHTML += `<li><b>Knockback Chance:</b> ${ailmentChance}%; unavailable on <b>bosses</b></li>
      <li><b>Knockback Distance:</b> 15m - 2×[target's size in in-game meters]</li>
      <li><b>Resistance Duration:</b> 1 second for every 1m knockback distance</li><br>`
              }

              function addingBurstBuffInformation(weapon, stackInput, eBarrier, result) {
                var stack = `1 stack`
                if ((weapon == "Staff" || weapon == "MD") && eBarrier) { stack = `2 stacks` }
                var HTML = `<b>Buff Effect:</b>
      <li>Gains ${stack} each time <b>another attacking skill from Magic Skills Tree</b> is cast; can stack up to a maximum of <b>${stackInput.max} stack`
                if (stackInput.max != 1) { HTML += `s` }
                HTML += `</b></li>
      <li>Upon casting this skill, <b>consumes all stacks</b> to decrease the <b>Total Cast Time</b> of this skill by 1 second for each stack; this is applied <b>after CSPD stat and Chain Cast effect</b></li>
      <li><b>Buff Duration:</b> Until <b>Magic: Burst</b> is used</li><br>`
                if (stackInput.max > 0) { result.innerHTML += HTML }
              }

              function addMagicBurstPlacedInfo(result) {
                result.innerHTML += `<b>Extra info:</b>
    <li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>The change in maximum stack count represents the required stack count for zero cast time; if the required stack is 0, the buff will not appear at all<ul>
    <li>&nbsp&nbsp&nbsp- It used to be a fixed number, but since this skill always use up <b>all stacks</b>, any excessive stack will end up serving no purpose at all; this change thus only helps you know how many stacks are needed to reduce cast time to zero, and otherwise have no other impact</li>
    </ul></li>
    <li><b>Magic: Burst</b> name and effect animation will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Burst</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Hell Inferno</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Eternal Blizzard</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Force Tempest</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Gravity Turn</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Punishment</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Eclipse</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicBurstValues() {
                var weaponSelector = document.getElementById("magicBurstWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicBurstLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var intSection = document.getElementById("magicBurstIntInput")
                var intValue = document.getElementById("magicBurstIntValue").value
                var CSPD = document.getElementById("magicBurstCSPD").value
                var stackInput = document.getElementById("mBurstStack")
                var stackCount = document.getElementById("mBurstStack").value
                var chainCast = document.getElementById("magicBurstChain").checked
                var chainCastSection = document.getElementById("magicBurstChainActive")
                var chainCastSelector = document.getElementById("magicBurstChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var mBurstStaffMdSection = document.getElementById("magicBurstStaffMdInput")
                var ccStack = document.getElementById("mBurstChainStack").value
                var eBarrier = document.getElementById("magicBurstEBarrier").checked
                var result = document.getElementById("magicBurstValues")
                calcMaxStackBurst(weapon, CSPD, stackInput, ccStack)
                weaponIntCheck(weapon, intSection)
                chainCastCheck(chainCast, chainCastSection)
                weaponChainStackCheck(weapon, mBurstStaffMdSection)
                calcMagicBurstConstant(level, result)
                calcMagicBurstMultiplier(level, weapon, intValue, result)
                calcMagicBurstCastTime(weapon, CSPD, chainCast, chainCastLevel, stackCount, ccStack, result)
                calcMagicBurstMotionSpeed(CSPD, chainCast, chainCastLevel, stackCount, result)
                calcMagicBurstHitRange(level, weapon, result)
                addBurstInvincible(weapon, result)
                calcBurstAilmentChance(level, result)
                addingBurstBuffInformation(weapon, stackInput, eBarrier, result)
                addMagicBurstPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicBurstValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/magiccannon.png" width="34" height="34">
                Magic: Magic Cannon
              </p>
              <p class="medium">
                Skill Magic: Magic Cannon Level 5 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>0</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>24</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>A magic cannon that mows down enemies in a straight line (<b style="color: gold">Charge Skill</b>).
                Charge
                it
                to increase its power and hit count. Using a skill that involves casting will speed up the charging.
                When
                charged over 100%, it may pierce through Guard.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power increases depending on INT.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Increases the charge bonus for skill power<br>
                Increases attack range.</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicMCannonWeapon" onchange="calcMagicMCannonValues()">
              <option value="staff" selected="">Staff</option>
              <option value="md">Main Magic Device</option>
              <option value="submd">Sub Magic Device</option>
              <option value="other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicMCannonSkillLevel" onchange="calcMagicMCannonValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Buff cast's Combo Tag:</b></span>
            <select id="magicMCannonBuffComboTag" onchange="calcMagicMCannonValues()">
              <option value="None" selected="">None</option>
              <option value="Cons">Consecutive</option>
              <option value="Mind">Mind's Eye</option>
              <option value="Save">Save</option>
              <option value="Swift">Swift</option>
              <option value="Smite">Smite</option>
              <option value="Tenacity">Tenacity</option>
              <option value="Invincible">Invincible</option>
              <option value="Bloodsuck">Bloodsucker</option>
              <option value="Tough">Tough</option>
              <option value="Reflect">Reflection</option>
            </select><br>
            <div id="buffCastBloodspiritActiveMCannon" style="display: none;">
              <span class="sub-title"><b>Spirit buff is active:</b></span>
              <input type="checkbox" id="buffBloodSpiritMCannon" onchange="calcMagicMCannonValues()"><br>
            </div>
            <div id="buffCastComboCountMCannon" style="display: none;">
              <span class="sub-title"><b>Buff cast's Combo count:</b></span>
              <input type="number" id="comboCountMCannon1" min="2" max="10" value="2" style="width: 3em"
                onchange="calcMagicMCannonValues()">
              <span class="sub-title">(nth skill in the combo)</span><br>
            </div>
            <div id="buffCastConsCountMCannon" style="display: none;">
              <span class="sub-title"><b>Buff cast's Consecutive Tag count:</b></span>
              <input type="number" id="consCountMCannon1" min="1" max="9" value="1" style="width: 2em"
                onchange="calcMagicMCannonValues()">
              <span class="sub-title">(nth Consecutive Tag in the combo)</span><br>
            </div>
            <span class="sub-title"><b>Magic: Magic Cannon buff is active:</b></span>
            <input type="checkbox" id="magicMCannonBuffActive" onchange="calcMagicMCannonValues()"><br>
            <div id="magicMCannonAttackInputs" style="display: none;">
              <span class="sub-title"><b>Attack cast's Combo Tag:</b></span>
              <select id="magicMCannonAttackComboTag" onchange="calcMagicMCannonValues()">
                <option value="None" selected="">None</option>
                <option value="Cons">Consecutive</option>
                <option value="Mind">Mind's Eye</option>
                <option value="Save">Save</option>
                <option value="Swift">Swift</option>
                <option value="Smite">Smite</option>
                <option value="Tenacity">Tenacity</option>
                <option value="Invincible">Invincible</option>
                <option value="Bloodsuck">Bloodsucker</option>
                <option value="Tough">Tough</option>
                <option value="Reflect">Reflection</option>
              </select><br>
              <div id="attackCastComboCountMCannon" style="display: none;">
                <span class="sub-title"><b>Attack cast's Combo count:</b></span>
                <input type="number" id="comboCountMCannon2" min="2" max="10" value="2" style="width: 3em"
                  onchange="calcMagicMCannonValues()">
                <span class="sub-title">(nth skill in the combo)</span><br>
              </div>
              <div id="attackCastConsCountMCannon" style="display: none;">
                <span class="sub-title"><b>Attack cast's Consecutive Tag count:</b></span>
                <input type="number" id="consCountMCannon2" min="1" max="1" value="1" style="width: 2em"
                  onchange="calcMagicMCannonValues()">
                <span class="sub-title">(nth Consecutive Tag in the combo)</span><br>
              </div>
              <div id="attackCastSmiteLastMCannon" style="display: none;">
                <span class="sub-title"><b>Last skill of combo:</b></span>
                <input type="checkbox" id="attackSmiteLastMCannon" onchange="calcMagicMCannonValues()"><br>
              </div>
              <div id="attackCastTenacityCostMCannon" style="display: none;">
                <span class="sub-title"><b>Remaining MP:</b></span>
                <select id="tenaRemainingMPMCannon" onchange="calcMagicMCannonValues()">
                  <option value="7" selected="">700 or more</option>
                  <option value="6">600 - 699</option>
                  <option value="5">500 - 599</option>
                  <option value="4">400 - 499</option>
                  <option value="3">300 - 399</option>
                  <option value="2">200 - 299</option>
                  <option value="1">100 - 199</option>
                  <option value="0">Less than 100</option>
                </select><br>
              </div>
              <div id="attackCastBloodspiritActiveMCannon" style="display: none;">
                <span class="sub-title"><b>Spirit buff is active:</b></span>
                <input type="checkbox" id="attackBloodSpiritMCannon" onchange="calcMagicMCannonValues()"><br>
              </div>
              <span class="sub-title"><b>Charge Amount (%):</b></span>
              <input type="number" id="magicMCannonBuffCharge" min="0" max="200" value="0" style="width: 4em"
                onchange="calcMagicMCannonValues()"><br>
              <span class="sub-title"> <b>Base INT:</b></span>
              <input type="number" value="255" min="1" max="510" id="magicMCannonIntValue"
                onchange="calcMagicMCannonValues()" style="width: 50px;"><br>
            </div>
            <br>
            <span id="magicMCannonValues">The skill can be used without requiring a target, and will <b>activate the
                buff
                cast</b>:
              <li><b>MP Cost:</b> 0</li>
              <li><b>Maximum Cast Range:</b> Unlimited</li>
              <li>The buff cast <b>cannot be used as the first skill of a combo</b></li>
              <li>Grant <b>Magic: Magic Cannon buff</b> that can be charged to a maximum of 200% charge</li><br><b>Extra
                info:</b>
              <li>A note for this skill's info: Combo Tag effects in this section are under the assumption that there
                are
                no
                other effects applied to this skill; certain effects can have different interaction with the Combo tag
                effects
                applied to the casts</li>
              <li><b>Zero Stance registlet</b> effect will only be applied if the attack cast is used out of combo;
                using
                the
                buff cast out of combo will not activate the registlet's effect<ul>
                  <li>&nbsp;&nbsp;&nbsp;- If the buff cast has a Combo tag, <b>Zero Stance effect will be overwritten if
                      said
                      Combo tag has a damage modifier effect</b>; it will work normally otherwise</li>
                </ul>
              </li>
              <li>The buff cast is <b>unaffected by any motion speed modifier except Swift Combo tag</b></li><br>The
              bonus
              of
              <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b><br>
              Credits to <b>Phantom Library</b> for the info of the skill
            </span>

            <script>
              function mMCBuffCheck(mMCBuff, magicMCannonAttackSection) {
                if (mMCBuff) { magicMCannonAttackSection.style = "display: block" }
                else { magicMCannonAttackSection.style = "display: none" }
              }

              function comboTagCheck(buffTag, attackTag, comboCountBuffSection, consCountBuffSection, comboCountAttackSection, consCountAttackSection, smiteLastSection, tenacityCostSection, buffBloodSpiritSection, attackBloodSpiritSection, bloodspirit, mMCBuff) {
                if ((buffTag == "Invincible" && !mMCBuff) || (buffTag == "Bloodsuck" && bloodspirit)) { comboCountBuffSection.style = "display: block" }
                else { comboCountBuffSection.style = "display: none" }
                if (buffTag == "Cons" && mMCBuff) { consCountBuffSection.style = "display: block" }
                else { consCountBuffSection.style = "display: none" }
                if (buffTag == "Bloodsuck") { buffBloodSpiritSection.style = "display: block" }
                else { buffBloodSpiritSection.style = "display: none" }
                if ((attackTag == "Cons" || attackTag == "Invincible" || attackTag == "Bloodsuck") && attackTag != buffTag) { comboCountAttackSection.style = "display: block" }
                else { comboCountAttackSection.style = "display: none" }
                if (attackTag == "Cons" && buffTag != "Cons") { consCountAttackSection.style = "display: block" }
                else { consCountAttackSection.style = "display: none" }
                if (attackTag == "Smite" && buffTag != "Smite" && mMCBuff) { smiteLastSection.style = "display: block" }
                else { smiteLastSection.style = "display: none" }
                if (attackTag == "Tenacity" && buffTag != "Tenacity" && mMCBuff) { tenacityCostSection.style = "display: block" }
                else { tenacityCostSection.style = "display: none" }
                if (attackTag == "Bloodsuck" && buffTag != "Bloodsuck") { attackBloodSpiritSection.style = "display: block" }
                else { attackBloodSpiritSection.style = "display: none" }
              }

              function changeMaxConsCount(comboCountAttack, consCountAttack) {
                var maxConsCount = comboCountAttack.value * 1 - 1
                if (consCountAttack.value > maxConsCount) { consCountAttack.value = maxConsCount }
                consCountAttack.max = maxConsCount
              }

              function addBuffCastTagInfo(buffTag, comboCountBuff, bloodspirit, result) {
                var HTML = ``
                var ccBuff = comboCountBuff.value
                var invChance = 20 * (ccBuff - 1)
                if (invChance > 100) { invChance = 100 }
                var hpCost = 10 - (ccBuff * 1)
                if (buffTag == "Swift") { HTML += `<li><b>Motion Speed</b> of the cast is set to 150%</li>` }
                else if (buffTag == "Invincible") { HTML += `<li>${invChance}% chance to gain [Invincible] until skill animation ends</li>` }
                else if (buffTag == "Bloodsuck") {
                  if (bloodspirit && hpCost > 0) { HTML += `<li><b>${hpCost}% of MaxHP</b> is consumed due to <b>Spirit</b> effect</li>` }
                  else if (!bloodspirit) { HTML += `<li>Grant <b>Spirit buff</b> for 10 seconds</li>` }
                }
                else if (buffTag == "Tough") { HTML += `<li>All damage received during skill animation are reduced by 50%</li>` }
                else if (buffTag == "Reflect") { HTML += `<li>Counterattack <b>once</b> upon getting hit during skill animation</li>` }
                result.innerHTML += HTML
              }

              function addBuffCastSubSection(buffTag, comboCountBuff, bloodspirit, mMCBuff, result) {
                if (!mMCBuff) {
                  result.innerHTML += `The skill can be used without requiring a target, and will <b>activate the buff cast</b>:
        <li><b>MP Cost:</b> 0</li>
        <li><b>Maximum Cast Range:</b> Unlimited</li>
        <li>The buff cast <b>cannot be used as the first skill of a combo</b></li>
        <li>Grant <b>Magic: Magic Cannon buff</b> that can be charged to a maximum of 200% charge</li>`
                  addBuffCastTagInfo(buffTag, comboCountBuff, bloodspirit, result)
                }
              }

              function calcAttackCastMpCost(buffTag, attackTag, comboCountAttack, smiteLast) {
                var mpCost = 700
                var ccBuff = comboCountAttack.value;
                if (attackTag == "Cons" && attackTag != buffTag) {
                  mpCost -= 100 * (ccBuff - 1)
                  if (mpCost < 0) { mpCost = 0 }
                }
                else if (attackTag == "Smite" && attackTag != buffTag && smiteLast) { mpCost *= 2 }
                var HTML = ``
                if (attackTag == "Save" && attackTag != buffTag) { HTML += `<li><b>MP Cost:</b> 0; 700 MP is saved for the next skill(s) in combo if there is any</li>` }
                else { HTML += `<li><b>MP Cost:</b> ${mpCost}</li>` }
                return HTML
              }

              function calcMagicMCannonConstant(weapon, charge) {
                var constant = 700 + 1 * charge
                if (weapon == "md" || weapon == "submd") { constant += 2 * charge }
                var hitGroup = ``
                if (charge > 20) { hitGroup += ` (All Hits)` }
                var HTML = ``
                if (charge > 0) {
                  HTML += `<br><li><b>Skill Constant${hitGroup}:</b> ${constant}`
                  if (charge > 20) { HTML += `; constant for each hit` }
                  HTML += `</li>`
                }
                return HTML
              }

              function calcMagicMCannonMultiplier(level, weapon, charge, intValue) {
                var multCharge = 0.03 * level * (charge % 20)
                var multMax = 0.03 * level * 20
                var multOverMax = 0.03 * level * 40
                var multiplier = 0
                if (charge < 100) { multiplier = multCharge }
                else { multiplier = multMax + multCharge }
                if (weapon == "staff") {
                  multiplier += intValue / 100
                  multMax += intValue / 100
                  multOverMax += intValue / 100
                }

                function rounding(value) {
                  if (value - Math.floor(value * 100) / 100 < 0.00999999) { value = Math.floor(value * 100) / 100 }
                  else { value = Math.round(value * 100) / 100 }
                  return value
                }

                multiplier = rounding(multiplier)
                multMax = rounding(multMax)
                multOverMax = rounding(multOverMax)

                var hitGroup1 = ``
                var hitGroup2 = ``
                var hitGroup3 = ``
                switch (true) {
                  case ((charge > 20 && charge < 40) || (charge > 100 && charge < 140)):
                    hitGroup1 += ` (First Hit)`
                    if (charge < 100) { hitGroup2 += ` (Second Hit)` }
                    else if (charge <= 120) { hitGroup2 += ` (Other Hits)` }
                    else {
                      hitGroup2 += ` (Second Hit)`
                      hitGroup3 += ` (Other Hits)`
                    }
                    break
                  case ((charge > 40 && charge < 60) || (charge >= 140 && charge < 160)):
                    hitGroup1 += ` (First 2 Hits)`
                    if (charge < 100) { hitGroup2 += ` (Third Hit)` }
                    else if (charge == 140) { hitGroup2 += ` (Other Hits)` }
                    else {
                      hitGroup2 += ` (Third Hit)`
                      hitGroup3 += ` (Other Hits)`
                    }
                    break
                  case ((charge > 60 && charge < 80) || (charge >= 160 && charge < 180)):
                    hitGroup1 += ` (First 3 Hits)`
                    if (charge < 100) { hitGroup2 += ` (Fourth Hit)` }
                    else if (charge == 160) { hitGroup2 += ` (Other Hits)` }
                    else {
                      hitGroup2 += ` (Fourth Hit)`
                      hitGroup3 += ` (Fifth Hit)`
                    }
                    break
                  case ((charge > 80 && charge < 100) || (charge >= 180 && charge < 200)):
                    hitGroup1 += ` (First 4 Hits)`
                    hitGroup2 += ` (Fifth Hit)`
                    break
                  case (charge % 20 == 0 && charge > 20): hitGroup1 += ` (All Hits)`; break
                }

                var multGroup1 = ``
                var multGroup2 = ``
                var multGroup3 = ``
                if (charge % 20 == 0) {
                  if (charge <= 100) {
                    multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multMax}`
                    if (charge > 20) { multGroup1 += `; multiplier for each hit` }
                    multGroup1 += `</li>`
                  }
                  else {
                    multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multOverMax}`
                    if (charge > 120) { multGroup1 += `; multiplier for each hit` }
                    multGroup1 += `</li>`
                    if (charge < 200) {
                      multGroup2 += `<li><b>Skill Multiplier${hitGroup2}:</b> ${multMax}`
                      if (charge < 180) { multGroup2 += `; multiplier for each hit` }
                      multGroup2 += `</li>`
                    }
                  }
                }
                else {
                  switch (true) {
                    case (charge < 20):
                      multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multiplier}</li>`
                      break
                    case (charge < 100):
                      multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multMax}`
                      if (charge > 40) { multGroup1 += `; multiplier for each hit` }
                      multGroup1 += `</li>`
                      multGroup2 += `<li><b>Skill Multiplier${hitGroup2}:</b> ${multiplier}</li>`
                      break
                    case (charge < 120):
                      multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multiplier}</li>`
                      multGroup2 += `<li><b>Skill Multiplier${hitGroup2}:</b> ${multMax}; multiplier for each hit</li>`
                      break
                    default:
                      multGroup1 += `<li><b>Skill Multiplier${hitGroup1}:</b> ${multOverMax}`
                      if (charge > 140) { multGroup1 += `; multiplier for each hit` }
                      multGroup1 += `</li>`
                      multGroup2 += `<li><b>Skill Multiplier${hitGroup2}:</b> ${multiplier}</li>`
                      if (charge < 180) {
                        multGroup3 += `<li><b>Skill Multiplier${hitGroup3}:</b> ${multMax}`
                        if (charge < 160) { multGroup3 += `; multiplier for each hit` }
                        multGroup3 += `</li>`
                      }
                  }
                }
                var HTML = ``
                if (charge > 0) { HTML += multGroup1 + multGroup2 + multGroup3 }
                return HTML
              }

              function calcMagicMCannonHitCountInfo(charge) {
                var hitCount = Math.ceil(charge / 20)
                if (hitCount > 5) { hitCount = 5 }
                var HTML = ``
                if (charge > 0) {
                  HTML += `<li><b>Hit Count:</b> ${hitCount} hit`
                  if (hitCount > 1) { HTML += `s; damage calculation is done for each hit` }
                  HTML += `</li>`
                }
                return HTML
              }

              function calcAttackCastHitRange(weapon, charge) {
                var length = 100
                var width = 2
                if (weapon == "md" || weapon == "submd") { width += 1 }
                var HTML = ``
                if (charge > 0) { HTML += `<li><b>Hit Range:</b> Length of ${length}m and radius of ${width}m; from the <b>caster</b> towards the <b>main target</b></li>` }
                return HTML
              }

              function calcBuffCastChargeTime(charge) {
                var maxCharge = 200
                var HTML = `<li>`
                if (charge == maxCharge) { HTML += `The buff is at the <b>maximum amount of charge</b>` }
                else {
                  HTML += `<b>Passively gains 1% charge</b> every`
                  if (charge >= 100) { HTML += ` 2 seconds` }
                  else { HTML += ` second` }
                  HTML += `; can <b>gain extra charge</b> upon using certain skills`
                }
                HTML += `</li>`
                return HTML
              }

              function addAttackCastUseInfo(charge) {
                var HTML = `<li>Using the attack cast during this stage will <b>consume the buff to launch an attack</b> from the caster`
                if (charge == 0) { HTML += `, but the attack will only result in a [Miss]` }
                HTML += `</li>`
                if (charge > 100) { HTML += `<li>This skill gains ${charge - 100}% <b>Guard Pierce</b> chance (chance of not getting [Guarded])</li>` }
                return HTML
              }

              function addBuffChargeManaExpEffect(charge) {
                var HTML = ``
                if (charge < 200) {
                  HTML += `<li><b>Getting afflicted with [Mana Explosion]</b> during this stage will <b>prevent charge gain from skill casting</b>`
                  if (charge >= 100) { HTML += ` as well as <b>stopping the passive charge gain</b>` }
                  HTML += ` until the ailment is removed</li>`
                }
                HTML += `<li><b>Taking damage from [Mana Explosion]</b> will <b>remove the buff</b></li>`
                return HTML
              }

              function addMagicMCannonBuffDuration(charge) {
                var HTML = `<li><b>Buff Duration:</b> Until <b>Magic: Magic Cannon</b> is cast again (attack cast) OR until you take damage from [Mana Explosion]</li>`
                return HTML
              }

              function addAttackCastComboTagInfo(buffTag, buffTagName, charge, attackTag, attackTagName, comboCountAttack, remainingMP, bloodspirit) {
                var ccAttack = comboCountAttack.value
                var tenaMPCost = remainingMP * 100
                var tenaHPCost = (7 - remainingMP) * 10
                var invChance = 20 * (ccAttack - 1)
                if (invChance > 100) { invChance = 100 }
                var vamp = 10 + (ccAttack * 1)
                var HTML = ``
                if (buffTag != "None" && attackTag != "None" && buffTag == attackTag) { HTML += `<li>&nbsp&nbsp&nbsp- Due to the <b>buff cast's ${buffTagName} Combo Tag</b>, the <b>attack cast's ${attackTagName} Combo Tag is negated</b></li>` }
                else if (attackTag != "None" && buffTag != attackTag) {
                  if (attackTag == "Tenacity" && remainingMP < 7) {
                    HTML += `<li>&nbsp&nbsp&nbsp- `
                    if (remainingMP > 0) { HTML += `<b>${tenaMPCost} MP</b> and ` }
                    HTML += `<b>${tenaHPCost}% of MaxHP</b> will be consumed instead of the usual MP Cost</li>`
                  }
                  else if (attackTag == "Swift") { HTML += `<li>&nbsp&nbsp&nbsp- <b>Motion Speed</b> of the cast is set to 150%</li>` }
                  else if (attackTag == "Invincible") { HTML += `<li>&nbsp&nbsp&nbsp- ${invChance}% chance to gain [Invincible] until skill animation ends</li>` }
                  else if (attackTag == "Bloodsuck" && !bloodspirit && charge > 0) { HTML += `<li>&nbsp&nbsp&nbsp- Heal yourself for ${vamp}% of the damage dealt by the skill, and grant Spirit buff for 10 seconds</li>` }
                  else if (attackTag == "Tough") { HTML += `<li>&nbsp&nbsp&nbsp- All damage received during skill animation are reduced by 50%</li>` }
                  else if (attackTag == "Reflect") { HTML += `<li>&nbsp&nbsp&nbsp- Counterattack <b>once</b> upon getting hit during skill animation</li>` }
                }
                return HTML
              }

              function addAttackCastComboMultiplierInfo(buffTag, comboCountBuff, consCountBuff, remainingMP, attackTag, comboCountAttack, consCountAttack, bloodspirit) {
                var HTML = ``
                var ccBuff = comboCountBuff.value
                var consBuff = consCountBuff.value
                var ccAttack = comboCountAttack.value
                var consAttack = consCountAttack.value
                var hpCost = 10 - (ccAttack * 1)
                var damageMod = 100
                if (buffTag == "Cons") { damageMod -= consBuff * 10 }
                if (buffTag == "Save") { damageMod -= 80 }
                if (buffTag == "Smite") { damageMod += 50 }
                if (attackTag != buffTag) {
                  if (attackTag == "Cons") { damageMod -= consAttack * 10 }
                  if (attackTag == "Save") { damageMod -= 80 }
                  if (attackTag == "Smite") { damageMod += 50 }
                  //if (attackTag == "Tenacity") {damageMod -= (7-remainingMP)*10}
                  if (bloodspirit && attackTag == "Bloodsuck" && buffTag != "Smite") { damageMod += 10 + (ccAttack * 1) }
                }
                if (damageMod < 10) { damageMod = 10 }
                if (damageMod != 100) {
                  HTML += `<li>&nbsp&nbsp&nbsp- <b>Damage dealt by the skill</b> is`
                  if (damageMod > 100) { HTML += ` increased to` }
                  else { HTML += ` decreased to` }
                  HTML += ` ${damageMod}%</li>`
                }
                if (bloodspirit && hpCost > 0 && attackTag == "Bloodsuck" && buffTag != attackTag) { HTML += `<li>&nbsp&nbsp&nbsp- <b>${hpCost}% of MaxHP</b> is consumed due to Spirit effect</li>` }
                return HTML
              }

              function addAttackCastSubSection(mMCBuff, level, weapon, charge, intValue, buffTag, buffTagName, comboCountBuff, consCountBuff, attackTag, attackTagName, comboCountAttack, consCountAttack, smiteLast, remainingMP, bloodspirit, result) {
                //Initiating attack cast sub section
                var HTML = `The skill requires a target to use, and will <b>activate the attack cast</b>:`
                HTML += calcAttackCastMpCost(buffTag, attackTag, comboCountAttack, smiteLast)
                HTML += `<li><b>Maximum Cast Range:</b> Infinite, limited to 24m (maximum targeting range)</li>`
                //Adding attack cast elements
                HTML += calcMagicMCannonConstant(weapon, charge)
                HTML += calcMagicMCannonMultiplier(level, weapon, charge, intValue)
                HTML += calcMagicMCannonHitCountInfo(charge)
                HTML += `<br>`
                HTML += calcAttackCastHitRange(weapon, charge)
                HTML += calcBuffCastChargeTime(charge)
                HTML += addAttackCastUseInfo(charge)
                HTML += addBuffChargeManaExpEffect(charge)
                var comboTagInfo = addAttackCastComboTagInfo(buffTag, buffTagName, charge, attackTag, attackTagName, comboCountAttack, remainingMP, bloodspirit)
                var comboMultInfo = addAttackCastComboMultiplierInfo(buffTag, comboCountBuff, consCountBuff, remainingMP, attackTag, comboCountAttack, consCountAttack, bloodspirit)
                if (charge > 0 && (comboTagInfo != "" || comboMultInfo != "")) {
                  HTML += `<li><b>Attack cast Combo Tag modifier:</b><ul>`
                  HTML += comboTagInfo
                  HTML += comboMultInfo
                  HTML += `</ul></li>`
                }
                HTML += addMagicMCannonBuffDuration(charge)
                if (mMCBuff) { result.innerHTML += HTML }
              }

              function addMMCannonExtraInfo(weapon, mMCBuff, charge, result) {
                var chargeMult1 = 40
                var chargeMult2 = 20
                if (weapon == "staff" || weapon == "md") {
                  chargeMult1 *= 2
                  chargeMult2 *= 2
                }
                var HTML = `<br><b>Extra info:</b>
      <li>A note for this skill's info: Combo Tag effects in this section are under the assumption that there are no other effects applied to this skill; certain effects can have different interaction with the Combo tag effects applied to the casts</li>
      <li><b>Zero Stance registlet</b> effect will only be applied if the attack cast is used out of combo; using the buff cast out of combo will not activate the registlet's effect<ul>
      <li>&nbsp&nbsp&nbsp- If the buff cast has a Combo tag, <b>Zero Stance effect will be overwritten if said Combo tag has a damage modifier effect</b>; it will work normally otherwise</li>
      </ul></li>`
                if (mMCBuff) {
                  HTML += `<li>This skill is affected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats; <b>Long Range Damage stat will be applied to the entire skill instead of Short Range Damage stat</b> if at least 1 enemy hit by this skill is at 8m or further from the <b>caster</b>, regardless of where the other enemies are</li>
    <li>List of skills that can charge <b>Magic: Magic Cannon</b>:<ul>
    <li>&nbsp&nbsp&nbsp- Magic Skills: <b>All skills except</b> <i>Chronos Shift</i>, <i>MP Charge</i> and <i>Guardian Beam</i></li>
    <li>&nbsp&nbsp&nbsp- Priest Skills: <b>Bless</b>, <b>Gloria</b>, <b>Royal Heal</b>, <b>Holy Light</b>, <b>Prayer</b></li>
    <li>&nbsp&nbsp&nbsp- Wizard Skills: <b>Mana Crystal</b>, <b>Imperial Ray</b></li>
    <li>&nbsp&nbsp&nbsp- Magic Blade Skills: <b>Ether Flare</b>, <b>Enchant Sword</b></li>
    <li>&nbsp&nbsp&nbsp- <b>Red Tear</b>, <b>Punish Ray</b></li>
    </ul></li>
    <li>The amount of charge gained from casting skill(s) is affected by <b>your CSPD stat</b> and <b>the final cast time of that skill</b>; the formula is estimated to be:<br>
    &nbsp&nbsp&nbsp&nbsp&nbsp&nbspAmount of charge (%) = ${chargeMult1}×[Cast time reduction percentage from CSPD] + [Final cast time]×[Skill Level]<br>
    For example, 1000 CSPD gives 50% cast time reduction, <b>Magic: Storm</b> in this case will have 0.5 seconds cast time; using <b>Magic: Storm</b> will charge a Lv10 <b>Magic: Magic Cannon</b> by an amount of:<br>
    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp${chargeMult1}×50% + 0.5×10 = ${chargeMult1 * 0.5 + 0.5 * 10}%<br>
    There are 3 exceptions: instant-cast <b>Magic: Impact</b>, instant-cast <b>Maximizer</b> and <b>Enchant Sword</b>; for these skills, the formula becomes:<br>
    &nbsp&nbsp&nbsp&nbsp&nbsp&nbspAmount of charge (%) = ${chargeMult2}×[Cast time reduction percentage from CSPD]<br>
    In either case, the charge gain will be halved if the current charge has reached 100%</li>`}
                else if (!mMCBuff) { HTML += `<li>The buff cast is <b>unaffected by any motion speed modifier except Swift Combo tag</b></li>` }
                HTML += ``
                result.innerHTML += HTML
              }

              function calcMagicMCannonValues() {
                var weaponSelector = document.getElementById("magicMCannonWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicMCannonSkillLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var buffTagSelector = document.getElementById("magicMCannonBuffComboTag")
                var buffTag = buffTagSelector[buffTagSelector.selectedIndex].value
                var buffTagName = buffTagSelector[buffTagSelector.selectedIndex].text
                var comboCountBuffSection = document.getElementById("buffCastComboCountMCannon")
                var consCountBuffSection = document.getElementById("buffCastConsCountMCannon")
                var buffBloodSpiritSection = document.getElementById("buffCastBloodspiritActiveMCannon")
                var magicMCannonAttackSection = document.getElementById("magicMCannonAttackInputs")
                var attackTagSelector = document.getElementById("magicMCannonAttackComboTag")
                var attackTag = attackTagSelector[attackTagSelector.selectedIndex].value
                var attackTagName = attackTagSelector[attackTagSelector.selectedIndex].text
                var comboCountAttackSection = document.getElementById("attackCastComboCountMCannon")
                var consCountAttackSection = document.getElementById("attackCastConsCountMCannon")
                var smiteLastSection = document.getElementById("attackCastSmiteLastMCannon")
                var smiteLast = document.getElementById("attackSmiteLastMCannon").checked
                var tenacityCostSection = document.getElementById("attackCastTenacityCostMCannon")
                var tenaCostSelector = document.getElementById("tenaRemainingMPMCannon")
                var remainingMP = tenaCostSelector[tenaCostSelector.selectedIndex].value
                var attackBloodSpiritSection = document.getElementById("attackCastBloodspiritActiveMCannon")
                var bloodspirit
                if (buffTag == "Bloodsuck") { bloodspirit = document.getElementById("buffBloodSpiritMCannon").checked }
                else if (attackTag == "Bloodsuck") { bloodspirit = document.getElementById("attackBloodSpiritMCannon").checked }
                var mMCBuff = document.getElementById("magicMCannonBuffActive").checked
                var charge = document.getElementById("magicMCannonBuffCharge").value
                var intValue = document.getElementById("magicMCannonIntValue").value
                var comboCountBuff = document.getElementById("comboCountMCannon1")
                var comboCountAttack = document.getElementById("comboCountMCannon2")
                var consCountBuff = document.getElementById("consCountMCannon1")
                var consCountAttack = document.getElementById("consCountMCannon2")
                var result = document.getElementById("magicMCannonValues")
                result.innerHTML = ``
                mMCBuffCheck(mMCBuff, magicMCannonAttackSection)
                comboTagCheck(buffTag, attackTag, comboCountBuffSection, consCountBuffSection, comboCountAttackSection, consCountAttackSection, smiteLastSection, tenacityCostSection, buffBloodSpiritSection, attackBloodSpiritSection, bloodspirit, mMCBuff)
                changeMaxConsCount(comboCountAttack, consCountAttack)
                addBuffCastSubSection(buffTag, comboCountBuff, bloodspirit, mMCBuff, result)
                addAttackCastSubSection(mMCBuff, level, weapon, charge, intValue, buffTag, buffTagName, comboCountBuff, consCountBuff, attackTag, attackTagName, comboCountAttack, consCountAttack, smiteLast, remainingMP, bloodspirit, result)
                addMMCannonExtraInfo(weapon, mMCBuff, charge, result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b><br>
    Credits to <b>Phantom Library</b> for the info of the skill`
              }

              calcMagicMCannonValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/crash.png" width="34" height="34">
                Magic: Crash
              </p>
              <p class="medium">
                Skill Magic: Crash Level 5 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>400</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>12</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Summons 3 little meteorites. When hitting the target, each meteorite may drop down again up to 2 times
                with
                diminishing power, but a higher chance of inflicting [Armor Break] or [Dizzy].</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power increases depending on INT.<br>
                Increases the chance of inflicting a status ailment.<br>
                Range (Radius) +0.5m</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Greatly increases the chance of inflicting a status ailment.<br>
                Range (Radius) +1.5m</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details open="">
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="magicCrashWeapon" onchange="calcMagicCrashValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Main Magic Device</option>
              <option value="SubMD">Sub Magic Device</option>
              <option value="Other">Other</option>
            </select><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicCrashLevel" onchange="calcMagicCrashValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <div id="mCrashIntInput" style="display: block;">
              <span class="sub-title"><b>Base INT:</b></span>
              <input type="number" id="mCrashINT" min="1" max="510" value="255" style="width: 4em; text-align: right"
                onchange="calcMagicCrashValues()"><br>
            </div>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="magicCrashCSPD"
              onchange="calcMagicCrashValues()"><br>
            <span class="sub-title"><b>Chain Cast buff is active:</b></span>
            <input type="checkbox" id="mCrashChain" onchange="calcMagicCrashValues()"><br>
            <div id="mCrashChainActive" style="display: none;">
              <span class="sub-title"><b>Chain Cast Level:</b></span>
              <select id="mCrashChainLevel" onchange="calcMagicCrashValues()">
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5</option>
                <option value="6">6</option>
                <option value="7">7</option>
                <option value="8">8</option>
                <option value="9">9</option>
                <option value="10" selected="">10</option>
              </select>
            </div>
            <div id="magicCrashChainStackInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="mCrashChainStack" min="0" max="10" value="0" style="width: 3em"
                onchange="calcMagicCrashValues()">
            </div>
            <br>
            <span id="magicCrashValues">
              <li><b>Skill Constant: </b> 400; constant for each hit</li>
              <li><b>Skill Multiplier (First Volley):</b> 5.85; multiplier for each hit</li>
              <li><b>Skill Multiplier (Second Volley):</b> 4; multiplier for each hit</li>
              <li><b>Skill Multiplier (Third Volley):</b> 3; multiplier for each hit</li>
              <li><b>Hit Count:</b> 3 hits per volley; damage calculation is done for each hit</li><br>
              <li><b>Cast Time:</b> 2 seconds (affected by CSPD)</li>
              <li><b>Hit Range (radius):</b> 2.5m, around the <b>drop location</b></li>
              <li><b>Drop Range (radius):</b> 1m + [target's size in in-game meters] (estimate), around &amp; follows
                the
                <b>main target</b>
              </li>
              <li><b>Armor Break Chance:</b> 20% (First Volley); 30% (Second Volley); 60% (Third Volley)</li>
              <li><b>Armor Break Duration:</b> 5 seconds</li>
              <li><b>Dizzy Chance:</b> 20% (First Volley); 30% (Second Volley); 60% (Third Volley); can only inflict if
                [Armor
                Break] is already inflicted</li>
              <li><b>Dizzy Duration:</b> 10 seconds</li><br><b>Extra info:</b>
              <li>This skill is a <b>placed skill</b>, making it unaffected by <b>Concentrate</b>, <b>Long Range
                  passive</b>,
                <b>Short Range Damage</b> and <b>Long Range Damage</b> stats
              </li>
              <li>Unlike most other skills, the total hit count of <b>Magic: Crash</b> is inconsistent and dependent on
                its
                own "successful hit count":<ul>
                  <li>&nbsp;&nbsp;&nbsp;- Each volley can have up to 3 meteors, but while the <b>First Volley</b> always
                    has
                    3
                    meteors, the <b>Second Volley</b> and <b>Third Volley</b> each will only have as many meteors as the
                    number of <b>successful hits</b> dealt by the previous volley</li>
                  <li>&nbsp;&nbsp;&nbsp;- Each meteor of the previous volley will only trigger the meteor with the
                    respective
                    order of the next volley; for example, denoting the meteor order as "First 1 &gt; First 2 &gt; First
                    3
                    &gt; Second 1 &gt; Second 2 &gt; Second 3 &gt; Third 1 &gt; Third 2 &gt; Third 3", a successful hit
                    by
                    "meteor 1" of the previous volley will trigger the "meteor 1" of the next volley, while a missed
                    "meteor
                    2" of the previous volley will result in an empty gap at when the "meteor 2" of the next volley is
                    supposed to drop</li>
                </ul>
              </li>
              <li>If <b>Magic: Crash</b> is recast while the previous <b>Magic: Crash</b> is still active, the latter
                will
                be
                removed and all of its remaining hits will be canceled</li>
              <li><b>Magic: Crash</b> name will change depending on its element:<ul>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Neutral:</b> Magic: Crash</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Fire:</b> Meteor Rain</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Water:</b> Hail</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Wind:</b> Fulgurite</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Earth:</b> Rockfall</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Light:</b> Meteor Light</li>
                  <li>&nbsp;&nbsp;&nbsp;- <b>Dark:</b> Cosmos</li>
                </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>
              <br>The
              bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function weaponIntCheckMCrash(weapon, intSection) {
                if (weapon == "Staff") { intSection.style = "display: block" }
                else { intSection.style = "display: none" }
              }

              function chainCastCheck(chainCast, chainCastSection) {
                if (chainCast) { chainCastSection.style = "display: block" }
                else { chainCastSection.style = "display: none" }
              }

              function weaponChainStackCheck(weapon, ccStackSection) {
                if (weapon == "Staff" || weapon == "MD") { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcMCrashConstant(result) {
                var constant = 400
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}; constant for each hit</li>`
              }

              function calcMCrashMultiplier(level, weapon, intValue, result) {
                var multiplier1 = 3 + 0.2 * level
                var multiplier2 = 2 + 0.2 * level
                var multiplier3 = 1 + 0.2 * level
                if (weapon == "Staff") { multiplier1 += intValue / 300 }
                if (multiplier1 - Math.floor(multiplier1 * 100) / 100 < 0.00999999) { multiplier1 = Math.floor(multiplier1 * 100) / 100 }
                else { multiplier1 = Math.round(multiplier1 * 100) / 100 }
                multiplier2 = Math.round(multiplier2 * 100) / 100
                multiplier3 = Math.round(multiplier3 * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier (First Volley):</b> ${multiplier1}; multiplier for each hit</li>
      <li><b>Skill Multiplier (Second Volley):</b> ${multiplier2}; multiplier for each hit</li>
      <li><b>Skill Multiplier (Third Volley):</b> ${multiplier3}; multiplier for each hit</li>`
              }

              function calcMCrashHitCount(level, result) {
                var HTML = `<li><b>Hit Count:</b> 3 hits per volley; damage calculation is done for each hit</li><br>`
                result.innerHTML += HTML
              }

              function calcMCrashCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result) {
                var baseCastTime = 2
                if (weapon != "Other") { baseCastTime -= ccStack / 10 }
                var castTime = calcCastTime(baseCastTime, CSPD)
                if (chainCast && castTime > 0) { castTime *= (1 - 0.05 * chainCastLevel) }
                castTime = Math.ceil(castTime * 100) / 100
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML += HTML
              }

              function calcMCrashMotionSpeed(CSPD, chainCast, chainCastLevel, result) {
                //Only applies if there's no cast time
                var castTime = calcCastTime(2, CSPD)
                var motionSpeed = 0
                if (chainCast && castTime == 0) { motionSpeed = 5 * chainCastLevel }
                if (motionSpeed > 0) { result.innerHTML += `<li><b>Motion Speed</b> of <b>Magic: Crash</b> +${motionSpeed}%</li>` }
              }

              function calcMCrashRange(level, weapon, result) {
                var hitRange = 2
                if (weapon == "Staff") { hitRange += 0.5 }
                else if (weapon == "MD" || weapon == "SubMD") { hitRange += 1.5 }
                result.innerHTML += `<li><b>Hit Range (radius):</b> ${hitRange}m, around the <b>drop location</b></li>
      <li><b>Drop Range (radius):</b> 1m + [target's size in in-game meters] (estimate),  around & follows the <b>main target</b></li>`
              }

              function calcMCrashAilmentChance(weapon, result) {
                var chance1 = 10
                if (weapon == "Staff") { chance1 *= 2 }
                else if (weapon == "MD" || weapon == "SubMD") { chance1 *= 4 }
                var chance2 = chance1 * 1.5
                var chance3 = chance1 * 3
                if (chance3 > 100) { chance3 = 100 }
                result.innerHTML += `<li><b>Armor Break Chance:</b> ${chance1}% (First Volley); ${chance2}% (Second Volley); ${chance3}% (Third Volley)</li>
      <li><b>Armor Break Duration:</b> 5 seconds</li>
      <li><b>Dizzy Chance:</b> ${chance1}% (First Volley); ${chance2}% (Second Volley); ${chance3}% (Third Volley); can only inflict if [Armor Break] is already inflicted</li>
      <li><b>Dizzy Duration:</b> 10 seconds</li>`
              }

              function addMCrashPlacedInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li>This skill is a <b>placed skill</b>, making it unaffected by <b>Concentrate</b>, <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats</li>
    <li>Unlike most other skills, the total hit count of <b>Magic: Crash</b> is inconsistent and dependent on its own "successful hit count":<ul>
    <li>&nbsp&nbsp&nbsp- Each volley can have up to 3 meteors, but while the <b>First Volley</b> always has 3 meteors, the <b>Second Volley</b> and <b>Third Volley</b> each will only have as many meteors as the number of <b>successful hits</b> dealt by the previous volley</li>
    <li>&nbsp&nbsp&nbsp- Each meteor of the previous volley will only trigger the meteor with the respective order of the next volley; for example, denoting the meteor order as "First 1 > First 2 > First 3 > Second 1 > Second 2 > Second 3 > Third 1 > Third 2 > Third 3", a successful hit by "meteor 1" of the previous volley will trigger the "meteor 1" of the next volley, while a missed "meteor 2" of the previous volley will result in an empty gap at when the "meteor 2" of the next volley is supposed to drop</li>
    </ul></li>
    <li>If <b>Magic: Crash</b> is recast while the previous <b>Magic: Crash</b> is still active, the latter will be removed and all of its remaining hits will be canceled</li>
    <li><b>Magic: Crash</b> name will change depending on its element:<ul>
      <li>&nbsp&nbsp&nbsp- <b>Neutral:</b> Magic: Crash</li>
      <li>&nbsp&nbsp&nbsp- <b>Fire:</b> Meteor Rain</li>
      <li>&nbsp&nbsp&nbsp- <b>Water:</b> Hail</li>
      <li>&nbsp&nbsp&nbsp- <b>Wind:</b> Fulgurite</li>
      <li>&nbsp&nbsp&nbsp- <b>Earth:</b> Rockfall</li>
      <li>&nbsp&nbsp&nbsp- <b>Light:</b> Meteor Light</li>
      <li>&nbsp&nbsp&nbsp- <b>Dark:</b> Cosmos</li>
      </ul>These visual changes are purely aesthetic, however, and have no other impact on gameplay</li>`
              }

              function calcMagicCrashValues() {
                var weaponSelector = document.getElementById("magicCrashWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("magicCrashLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var intSection = document.getElementById("mCrashIntInput")
                var intValue = document.getElementById("mCrashINT").value
                var CSPD = document.getElementById("magicCrashCSPD").value
                var chainCast = document.getElementById("mCrashChain").checked
                var chainCastSection = document.getElementById("mCrashChainActive")
                var chainCastSelector = document.getElementById("mCrashChainLevel")
                var chainCastLevel = chainCastSelector[chainCastSelector.selectedIndex].value
                var ccStackSection = document.getElementById("magicCrashChainStackInput")
                var ccStack = document.getElementById("mCrashChainStack").value
                var result = document.getElementById("magicCrashValues")
                weaponIntCheckMCrash(weapon, intSection)
                chainCastCheck(chainCast, chainCastSection)
                weaponChainStackCheck(weapon, ccStackSection)
                calcMCrashConstant(result)
                calcMCrashMultiplier(level, weapon, intValue, result)
                calcMCrashHitCount(level, result)
                calcMCrashCastTime(weapon, CSPD, chainCast, chainCastLevel, ccStack, result)
                calcMCrashMotionSpeed(CSPD, chainCast, chainCastLevel, result)
                calcMCrashRange(level, weapon, result)
                calcMCrashAilmentChance(weapon, result)
                addMCrashPlacedInfo(result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMagicCrashValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/magicmastery.png" width="34" height="34">
                Magic Mastery
              </p>
              <p class="medium">
                Skill Magic Mastery Level 1 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/staff.png"><img src="images/icon/md-main.png"><br>Staff/Main MD only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Passive</p>
            </div>
            <div>
              <p class="accent-bold"></p>
              <p>Neutral</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Get better at using magic weapons. ATK of Staffs and Magic Devices increases.</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicMasteryLevel" onchange="calcMagicMastery()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <br>
            <span id="magicMasteryValues">
              <li><b>MATK</b> +3%</li>
              <li><b> Weapon ATK</b> +30% </li>
            </span>

            <script>
              function calcMagicMasteryMagicAtk(level, result) {
                var magicAtk = 1 + Math.ceil((level - 2) / 5)
                result.innerHTML = `<li><b>MATK</b> +${magicAtk}%</li>`
              }

              function calcMagicMasteryWeaponAtk(level, result) {
                var weaponAtk = 3 * level
                result.innerHTML += `<li><b> Weapon ATK</b> +${weaponAtk}% </li>`
              }

              function calcMagicMastery() {
                var levelSelector = document.getElementById("magicMasteryLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var result = document.getElementById("magicMasteryValues")
                calcMagicMasteryMagicAtk(level, result)
                calcMagicMasteryWeaponAtk(level, result)
              }

              calcMagicMastery()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/magicknife.png" width="34" height="34">
                Magic Knife
              </p>
              <p class="medium">
                Skill Magic Knife Level 2 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/staff.png"><br>Staff only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Physical skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>0</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>No</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>8</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Sends out magic daggers to contain enemy. This skill has "normal attack proration". Guarantees a hit
                with
                a
                small amount of MP recovered. Additional attack with normal attack proration increases when it becomes
                Lv10.
              </p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicKnifeLevel" onchange="calcmagicKnifeValue()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <br>
            <span id="magicKnifeValue">
              <li><b>Skill Constant (First 4 hits):</b> 0; total constant of all hits</li>
              <li><b>Skill Constant (Last Hit):</b> 0</li>
              <li><b>Skill Multiplier (First 4 hits):</b> 1.5; total multiplier of all hits</li>
              <li><b>Skill Multiplier (Last hit):</b> 1.5</li>
              <li><b>Hit Count:</b> 5 hits; damage calculation of the first 4 hits is done once then spread evenly
                between
                said hits; damage calculation of the last his is done separately</li><br>
              <li>This skill has the <b>Perfect Aim</b> attribute: it cannot [Miss] or [Graze], but can be [Evaded]</li>
              <li>Each successful hit of the <b>first 4 hits</b> recovers 5 MP; the <b>last hit</b> recovers an
                additional
                20
                MP</li>
              <li>The <b>first 4 hits</b> inflicts <b>Normal Attack Proration</b> once; if successfully activated, the
                <b>last
                  hit</b> will inflict an extra <b>Normal Attack Proration</b> (meaning that the entire skill can
                inflict
                proration twice)
              </li><br><b>Extra info:</b>
              <li>This skill uses <b>Physical Proration</b> for its damage calculation</li>
              <li>The hits of this skill must land successfully (no [Miss] nor [Evaded]) in order to activate the MP
                recovery;
                if the target dies before the hits land, they will also not recover any MP</li>
              <li>Despite being called a "magic" both in name and description, this skill actually <b>fully functions
                  like
                  a
                  physical skill, if not actually is a physical skill</b>: it uses purely physical stats (ATK, Physical
                Critical, enemy's DEF, enemy's Physical Resistance, etc...), can still be used during [Silence] but not
                [Bleed]; it also <b>does not give any Magic: Burst stack</b> despite being an attacking skill from
                <b>Magic
                  Skills Tree</b>
              </li>
              <li>If the first 4 hits [Miss] or are [Evaded], the last hit will not activate, thus will also not inflict
                the
                additional proration nor recover extra MP</li>
              <li>Due to the speed of the skill, it is actually more efficient to spam it rather than waiting for the
                last
                hit
                when it comes to faster prorating, unless the caster has too low motion speed or has other priorities
              </li>
            </span>

            <script>
              function calcMagicKnifeConstant(level, result) {
                var HTML = ``
                if (level == 10) {
                  HTML += `<li><b>Skill Constant (First 4 hits):</b> 0; total constant of all hits</li>
      <li><b>Skill Constant (Last Hit):</b> 0</li>`}
                else { HTML += `<li><b>Skill Constant:</b> 0</li>` }
                result.innerHTML = HTML
              }

              function calcMagicKnifeMultiplier(level, result) {
                var multiplier = Math.min(0.6 + (0.1 * level), 1.5)
                multiplier = Math.round(multiplier * 100) / 100
                var HTML = ``
                if (level == 10) {
                  HTML += `<li><b>Skill Multiplier (First 4 hits):</b> ${multiplier}; total multiplier of all hits</li>
      <li><b>Skill Multiplier (Last hit):</b> 1.5</li>`}
                else { HTML += `<li><b>Skill Multiplier:</b> ${multiplier}; total multiplier of all hits</li>` }
                HTML += `<li><b>Hit Count:</b>`
                if (level == 10) { HTML += ` 5 hits; damage calculation of the first 4 hits is done once then spread evenly between said hits; damage calculation of the last his is done separately` }
                else { HTML += ` 4 hits; damage calculation is done once then spread evenly between the hits` }
                HTML += `</li>`
                result.innerHTML += HTML
              }

              function calcEffectMagicKnife(level, result) {
                //(3 + Floor((Min[SLv ; 9] - 1)/3)
                var mp = 3 + Math.floor((Math.min(level, 9) - 1) / 3)
                let HTML = `<br><li>This skill has the <b>Perfect Aim</b> attribute: it cannot [Miss] or [Graze], but can be [Evaded]</li>`
                if (level == 10) {
                  HTML += `<li>Each successful hit of the <b>first 4 hits</b> recovers ${mp} MP; the <b>last hit</b> recovers an additional ${4 * mp} MP</li>
      <li>The <b>first 4 hits</b> inflicts <b>Normal Attack Proration</b> once; if successfully activated, the <b>last hit</b> will inflict an extra <b>Normal Attack Proration</b> (meaning that the entire skill can inflict proration twice)</li>`}
                else {
                  HTML += `<li>Each successful hit recovers ${mp} MP</li>
      <li>This skill inflicts <b>Normal Attack Proration</b></li>`}
                result.innerHTML += HTML
              }

              function addMagicKnifeExtraInfo(level, result) {
                var HTML = `<br><b>Extra info:</b>
      <li>This skill uses <b>Physical Proration</b> for its damage calculation</li>
      <li>The hits of this skill must land successfully (no [Miss] nor [Evaded]) in order to activate the MP recovery; if the target dies before the hits land, they will also not recover any MP</li>
      <li>Despite being called a "magic" both in name and description, this skill actually <b>fully functions like a physical skill, if not actually is a physical skill</b>: it uses purely physical stats (ATK, Physical Critical, enemy's DEF, enemy's Physical Resistance, etc...), can still be used during [Silence] but not [Bleed]; it also <b>does not give any Magic: Burst stack</b> despite being an attacking skill from <b>Magic Skills Tree</b></li>`
                if (level == 10) {
                  HTML += `<li>If the first 4 hits [Miss] or are [Evaded], the last hit will not activate, thus will also not inflict the additional proration nor recover extra MP</li>
      <li>Due to the speed of the skill, it is actually more efficient to spam it rather than waiting for the last hit when it comes to faster prorating, unless the caster has too low motion speed or has other priorities</li>`}
                result.innerHTML += HTML
              }

              function calcmagicKnifeValue() {
                let levelSelector = document.getElementById("magicKnifeLevel")
                let level = levelSelector[levelSelector.selectedIndex].value
                let result = document.getElementById("magicKnifeValue")
                calcMagicKnifeConstant(level, result)
                calcMagicKnifeMultiplier(level, result)
                calcEffectMagicKnife(level, result)
                addMagicKnifeExtraInfo(level, result)
              }

              calcmagicKnifeValue()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/qadal.png" width="34" height="34">
                Qadal
              </p>
              <p class="medium">
                Skill Qadal Level 3 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/staff.png"><br>Staff only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>2</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>0</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>A forbidden technique that places a heavy burden on the mind and body. Consumes current HP and Max HP
                (random
                value) to halve the MP Cost of the next skill used and guarantee critical. <b style="color: #E77577">If
                  the
                  burden gets too heavy from repeated use, then...</b></p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>When MaxHP gets reduced due to this skill, the power of magic skills will gradually increase over
                time.<br>
                If Qadal's effect ends because you get knocked out or move to another map, the power increase will be
                reset.
              </p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Skill Level:</b></span>
            <select name="skillLevel" id="qadalSkillLevel" onchange="calcQadalValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Base DEX:</b></span>
            <input type="number" value="255" min="1" max="510" id="qadalDexValue" onchange="calcQadalValues()"
              style="width: 4em; text-align: right;"><br>
            <span class="sub-title"><b>Total Percentage DEX Bonus:</b></span>
            <input type="number" value="0" id="qadalPercentDex" onchange="calcQadalValues()"
              style="width: 4em; text-align: right;"><br>
            <span class="sub-title"><b>Total Flat DEX Bonus:</b></span>
            <input type="number" value="0" id="qadalFlatDex" onchange="calcQadalValues()"
              style="width: 4em; text-align: right;"><br>
            <br>
            <span id="qadalValues"><b>Skill Effect:</b> Consumes 10% of your <b>Current HP</b> and grants the following
              effects upon successful cast:
              <li>Grants <b>Qadal buff</b> to the <b>caster</b></li>
              <li>Grants a random amount of <b>Qadal charge</b> between 20% and 40%</li><br><b>Buff Effect:</b>
              <li>The next <b>skill</b> has its <b>MP Cost halved</b>, rounded up to the nearest multiple of 100</li>
              <li>In addition, that skill will also <b>always deal critical hits</b></li>
              <li><b>Buff Duration:</b> Until a skill is used</li>
              <br><b>Charge Effect:</b>
              <li><b>MaxHP</b> is reduced by a percentage equals to the <b>current Qadal charge percentage</b></li>
              <li>Increases the damage of <b>all attacking skill from Magic Skills Tree</b> by 1% for every 3 seconds
                <b>since
                  starting combat</b>; this value <b>cannot exceed the current Qadal charge percentage</b>
              </li>
              <li>Upon exceeding 100% charge, all charges will be removed and one of the following cases will happen at
                random
                (the actual chance of each case is yet to be confirmed):<ul>
                  <li>&nbsp;&nbsp;&nbsp;- (Very low chance) Set the <b>caster's HP</b> to 1, recover the <b>caster's
                      MP</b>
                    to
                    full, and gain [Invincible] for 2 seconds; this is also the only case where <b>Qadal Buff</b>
                    effects
                    will
                    still remain after cast</li>
                  <li>&nbsp;&nbsp;&nbsp;- (Low chance) Set the <b>caster's HP</b> to 1 and inflict [Stun] to the
                    <b>caster</b>
                    for 5 seconds
                  </li>
                  <li>&nbsp;&nbsp;&nbsp;- (Low chance) Set the <b>caster's HP</b> to 1 and inflict [Sleep] to the
                    <b>caster</b> for 10 seconds
                  </li>
                  <li>&nbsp;&nbsp;&nbsp;- (Common chance) <b>Instantly KO the caster</b></li>
                </ul>
              </li>
              <li><b>Charge Duration:</b> 3 minutes; <b>does not refresh</b> upon gaining charge</li><br><b>Extra
                info:</b>
              <li>Using this skill again when the <b>Qadal buff</b> is not consumed yet will not give any effect nor
                charge
                at
                all but will still consume MP</li>
              <li>Higher skill level can reduce the <b>KO case</b> and <b>Sleep case</b> chances, while increasing the
                <b>Stun
                  case</b> and <b>Invincible case</b> chances; the amount is yet to be confirmed, however
              </li>
              <li>The <b>Personal Stat</b> LUK seems to also be able to affect the chance of the cases; however, the
                credibility and the effect (if any) are yet to be fully confirmed</li>
              <li>For skills that deal damage over time, the <b>always crit</b> effect will remain as long as you do not
                apply
                <b>Qadal</b> again on another skill before the former ends; doing so may ends the effect
              </li>
              <li>The timer for calculating the damage boost effect <b>starts as soon as you engage an enemy</b>, and
                <b>resets when your party defeats any enemy in non-boss maps, when there's no other target, upon
                  changing
                  map,
                  or when you get KO</b>
              </li>
              <li>There is a slight lag in applying the buff as the buff is "server side" (takes time for the
                information
                to
                be delivered from the server to the client side); if the caster has enough motion speed and use this
                skill
                in
                a combo, the next skill in combo may not be able to gain the <b>always crit</b> boost, and instead is
                granted
                to the skill after that</li>
            </span>

            <script>
              function addQadalSkillEffect(level, baseDex, percentDex, flatDex, result) {
                // (MAX[30 - Floor(TotalDex/25); 10])% and (100 - 5 * Skill Level - Floor(BaseDex/25))%
                var totalDex = baseDex * (100 + percentDex * 1) / 100 + flatDex * 1
                if (totalDex - Math.floor(totalDex) < 0.99999999) { totalDex = Math.floor(totalDex) }
                else { totalDex = Math.round(totalDex) }
                var chargeMin = Math.max(30 - Math.floor(totalDex / 25), 10)
                var chargeMax = 100 - 5 * level - Math.floor(baseDex / 25)
                var HTML = `<b>Skill Effect:</b> Consumes 10% of your <b>Current HP</b> and grants the following effects upon successful cast:
    <li>Grants <b>Qadal buff</b> to the <b>caster</b></li>
    <li>Grants a random amount of <b>Qadal charge</b> between ${chargeMin}% and ${chargeMax}%</li>`
                result.innerHTML = HTML
              }

              function addQadalBuffEffect(result) {
                result.innerHTML += `<br><b>Buff Effect:</b>
    <li>The next <b>skill</b> has its <b>MP Cost halved</b>, rounded up to the nearest multiple of 100</li>
    <li>In addition, that skill will also <b>always deal critical hits</b></li>
    <li><b>Buff Duration:</b> Until a skill is used</li>
    <br><b>Charge Effect:</b>
    <li><b>MaxHP</b> is reduced by a percentage equals to the <b>current Qadal charge percentage</b></li>
    <li>Increases the damage of <b>all attacking skill from Magic Skills Tree</b> by 1% for every 3 seconds <b>since starting combat</b>; this value <b>cannot exceed the current Qadal charge percentage</b></li>
    <li>Upon exceeding 100% charge, all charges will be removed and one of the following cases will happen at random (the actual chance of each case is yet to be confirmed):<ul>
    <li>&nbsp&nbsp&nbsp- (Very low chance) Set the <b>caster's HP</b> to 1, recover the <b>caster's MP</b> to full, and gain [Invincible] for 2 seconds; this is also the only case where <b>Qadal Buff</b> effects will still remain after cast</li>
    <li>&nbsp&nbsp&nbsp- (Low chance) Set the <b>caster's HP</b> to 1 and inflict [Stun] to the <b>caster</b> for 5 seconds</li>
    <li>&nbsp&nbsp&nbsp- (Low chance) Set the <b>caster's HP</b> to 1 and inflict [Sleep] to the <b>caster</b> for 10 seconds</li>
    <li>&nbsp&nbsp&nbsp- (Common chance) <b>Instantly KO the caster</b></li>
    </ul></li>
    <li><b>Charge Duration:</b> 3 minutes; <b>does not refresh</b> upon gaining charge</li>`
              }

              function addQadalExtraInfo(result) {
                result.innerHTML += `<br><b>Extra info:</b>
    <li>Using this skill again when the <b>Qadal buff</b> is not consumed yet will not give any effect nor charge at all but will still consume MP</li>
    <li>Higher skill level can reduce the <b>KO case</b> and <b>Sleep case</b> chances, while increasing the <b>Stun case</b> and <b>Invincible case</b> chances; the amount is yet to be confirmed, however</li>
    <li>The <b>Personal Stat</b> LUK seems to also be able to affect the chance of the cases; however, the credibility and the effect (if any) are yet to be fully confirmed</li>
    <li>For skills that deal damage over time, the <b>always crit</b> effect will remain as long as you do not apply <b>Qadal</b> again on another skill before the former ends; doing so may ends the effect</li>
    <li>The timer for calculating the damage boost effect <b>starts as soon as you engage an enemy</b>, and <b>resets when your party defeats any enemy in non-boss maps, when there's no other target, upon changing map, or when you get KO</b></li>
    <li>There is a slight lag in applying the buff as the buff is "server side" (takes time for the information to be delivered from the server to the client side); if the caster has enough motion speed and use this skill in a combo, the next skill in combo may not be able to gain the <b>always crit</b> boost, and instead is granted to the skill after that</li>`
              }

              function calcQadalValues() {
                let levelSelector = document.getElementById('qadalSkillLevel')
                let level = levelSelector[levelSelector.selectedIndex].value
                let baseDex = document.getElementById("qadalDexValue").value
                let percentDex = document.getElementById("qadalPercentDex").value
                let flatDex = document.getElementById("qadalFlatDex").value
                let result = document.getElementById('qadalValues')
                addQadalSkillEffect(level, baseDex, percentDex, flatDex, result)
                addQadalBuffEffect(result)
                addQadalExtraInfo(result)
              }

              calcQadalValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/mpcharge.png" width="34" height="34">
                MP Charge
              </p>
              <p class="medium">
                Skill MP Charge Level 1 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>0</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>No</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>0</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Restore MP by charging magic power. The charging time reduces as the skill levels up.<br><br>
                <b>Unlike other skills, CSPD can only partially reduce this skill's Cast Time (up to a maximum 1 second
                  reduction at 1000 CSPD); negative CSPD does not affect the cast time</b><br><br>
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Charge Time is shortened.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Charge Time is shortened a little.<br>
                MP Heal Amount +50</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="weaponType" onchange="calcMpCharge()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="mpChargeLevel" onchange="calcMpCharge()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="mpChargeCSPD"
              onchange="calcMpCharge()"><br>
            <div id="mpChargeRapidInput" style="display: block;">
              <span class="sub-title"><b>"Rapid Charge" Skill Level:</b></span>
              <select id="mpChargeRapidLevel" onchange="calcMpCharge()">
                <option value="0" selected="">0</option>
                <option value="1">1</option>
                <option value="2">2</option>
                <option value="3">3</option>
                <option value="4">4</option>
                <option value="5">5+</option>
              </select><br>
            </div>
            <span class="sub-title"><b>"Silent Recharge" Registlet Level:</b></span>
            <select id="mpChargeRegistlet" onchange="calcMpCharge()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
              <option value="11">11</option>
              <option value="12">12</option>
              <option value="13">13</option>
              <option value="14">14</option>
              <option value="15">15</option>
              <option value="16">16</option>
              <option value="17">17</option>
              <option value="18">18</option>
              <option value="19">19</option>
              <option value="20">20</option>
            </select><br>
            <div id="silenceActive" style="display: none;">
              <span class="sub-title"><b>Caster afflicted with [Silence]:</b></span>
              <input type="checkbox" id="mpChargeSilence" onchange="calcMpCharge()"><br>
            </div>
            <br>
            <span id="mpChargeValues">
              <li><b>Charge Time:</b> 3 seconds</li>
              <li><b>MP Recovered:</b> 300</li><br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function mpChargeWeaponCheck(weapon, rapidSection) {
                if (weapon != "Other") { rapidSection.style = "display: block" }
                else { rapidSection.style = "display: none" }
              }

              function silenceCheck(registlet, silenceSection) {
                if (registlet != 0) { silenceSection.style = "display: block" }
                else { silenceSection.style = "display: none" }
              }

              function calcMPChargeCastTime(level, weapon, CSPD, rapidLevel, result) {
                var castTime = 10 - Math.ceil(level / 3)
                cspdReduc = CSPD / 1000
                if (cspdReduc > 1) { cspdReduc = 1 }
                if (cspdReduc < 0) { cspdReduc = 0 }
                cspdReduc = Math.ceil(cspdReduc * 100) / 100
                if (weapon == "Staff") { castTime = castTime / 2 - rapidLevel * 0.2 }
                else if (weapon == "MD") { castTime = castTime / 1.5 - rapidLevel * 0.2 }
                castTime -= cspdReduc
                if (castTime - Math.floor(castTime * 100) / 100 < 0.0099) { castTime = Math.floor(castTime * 100) / 100 }
                else { castTime = Math.round(castTime * 100) / 100 }
                var HTML = `<li><b>Charge Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += `</li>`
                result.innerHTML = HTML
              }

              function calcMPChargeMpRestored(level, weapon, registlet, silence, result) {
                var mpRestored = 200 + (10 * level)
                if (weapon == "MD") { mpRestored += 50 }
                if (registlet != 0 && silence) { mpRestored *= 1 + 0.05 * registlet }
                var decimalCheck = mpRestored - Math.floor(mpRestored)
                if (decimalCheck < 0.8) { mpRestored = Math.floor(mpRestored) }
                else { mpRestored = Math.ceil(mpRestored) }
                result.innerHTML += `<li><b>MP Recovered:</b> ${mpRestored}</li>`
              }

              function calcMpCharge() {
                var weaponSelector = document.getElementById("weaponType")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("mpChargeLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var CSPD = document.getElementById("mpChargeCSPD").value
                var rapidSection = document.getElementById("mpChargeRapidInput")
                var rapidLevelSelector = document.getElementById("mpChargeRapidLevel")
                var rapidLevel = rapidLevelSelector[rapidLevelSelector.selectedIndex].value
                var registletSelector = document.getElementById("mpChargeRegistlet")
                var registlet = registletSelector[registletSelector.selectedIndex].value
                var silenceSection = document.getElementById("silenceActive")
                var silence = document.getElementById("mpChargeSilence").checked
                var result = document.getElementById("mpChargeValues")
                mpChargeWeaponCheck(weapon, rapidSection)
                silenceCheck(registlet, silenceSection)
                calcMPChargeCastTime(level, weapon, CSPD, rapidLevel, result)
                calcMPChargeMpRestored(level, weapon, registlet, silence, result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMpCharge()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/chaincast.png" width="34" height="34">
                Chain Cast
              </p>
              <p class="medium">
                Skill Chain Cast Level 2 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Passive</p>
            </div>
            <div>
              <p class="accent-bold"></p>
              <p>Neutral</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Efficiently cast magic. The cast speed of the magic skill used after "Magic: Arrows" increases.<br>
                <font style="color: #009fff">Additional effect granted with staff or magic device (main).</font>
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Each time an attack skill that has a casting time hits, Casting speed will increase, MATK will slightly
                increase, and an effect that boosts magic stability can be earned up to 10 times.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Each time an attack skill that has a casting time hits, Casting speed will increase, MATK will
                increase,
                and
                an effect that slightly boosts magic stability can be earned up to 10 times.</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details open="">
            <summary>Show more...</summary><br><span class="sub-title"><b>Main Weapon:</b></span>
            <select id="chainCastWeapon" onchange="calcChainCastValues()">
              <option value="staff" selected="">Staff</option>
              <option value="md">Magic Device</option>
              <option value="other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="chainCastLevel" onchange="calcChainCastValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select>
            <br>
            <span class="sub-title"><b>Skill has Cast Time</b>:</span>
            <input type="checkbox" id="isCastTime" onchange="calcChainCastValues()"><br>
            <div id="chainCastStackInput" style="display: block;">
              <span class="sub-title"><b>Chain Cast stack count:</b></span>
              <input type="number" id="chainCastStack" min="1" max="10" value="1" style="width: 3em"
                onchange="calcChainCastValues()">
            </div>
            <br>
            <span id="chainCastValues">
              <li>Grants <b>Chain Cast buff</b> whenever <b>Magic: Arrows</b> is cast</li>
              <li>Grants 1 <b>Chain Cast Additional Buff stack</b> for <b>each successful hit</b> of an attacking skill
                from
                <b>Magic Skills Tree</b>; can stack up to a maximum of <b>10 stacks</b>
              </li><br><b>Buff Effect:</b>
              <li>The next <b>attacking skill from Magic Skills Tree</b> will have its <b>Motion Speed</b> increased by
                50%;
                this effect stacks multiplicatively with the effects of [Freeze] and <b>Swift Combo tag</b></li>
              <li><b>Buff Duration:</b> Until an attack skill from Magic Skills tree is used</li><br><b>Additional Buff
                Effect:</b>
              <li><b>MATK</b> +10</li>
              <li><b>Magic Stability</b> +2%</li>
              <li>Reduces the <b>Base Cast Time</b> of all <b>attacking skill from Magic Skills Tree</b> by 0.1 seconds;
                this
                effect <b>cannot reduce the Base Cast Time to any lower than 1 second</b></li>
              <li><b>Stacks Duration:</b> 30 seconds; refresh upon gaining stack(s); loses 1 stack instead of the entire
                buff
                when the duration runs out</li><br><b>Extra info:</b>
              <li>Unlike the <b>main buff</b>, the cast time reduction effect of the <b>Additional buff</b> is treated
                as
                <b>Base Cast Time reduction</b>, therefore it is applied <b>before CSPD stat</b>
              </li>
              <li>As the cast time reduction effect of the <b>Additional buff</b> can only lower the <b>Base Cast
                  Time</b>
                to
                a minimum of 1 second, skills with a Base Cast Time of 1 second or less will not benefit from this
                effect
                at
                all, and skills with a Base Cast Time of more than 1 second but below 2 seconds will receive reduced
                effect
                (though currently there is no such skill of the latter case exists in <b>Magic Skills Tree</b> yet)</li>
              <li><b>Chain Cast Additional Buff stacks</b> are granted <b>per hit</b> instead of <b>per skill</b>,
                therefore
                skills that can deal multiple hit will also give multiple stacks per cast</li>
              <li>For some reason, <b>Ether Flare</b> can also give 1 <b>Chain Cast Additional Buff stack</b></li>
            </span>

            <script>
              function weaponChainCastCheck(weapon, ccStackSection) {
                if (weapon != "other") { ccStackSection.style = "display: block" }
                else { ccStackSection.style = "display: none" }
              }

              function calcChainCastMainBuff(level, weapon, isCastTime, result) {
                var castSpeed = 5 * level
                var HTML = `<li>Grants <b>Chain Cast buff</b> whenever <b>Magic: Arrows</b> is cast</li>`
                if (weapon != "other") { HTML += `<li>Grants 1 <b>Chain Cast Additional Buff stack</b> for <b>each successful hit</b> of an attacking skill from <b>Magic Skills Tree</b>; can stack up to a maximum of <b>10 stacks</b></li>` }
                HTML += `<br><b>Buff Effect:</b>
    <li>The next <b>attacking skill from Magic Skills Tree</b> will have its `
                if (isCastTime) { HTML += `<b>Cast Time</b> reduced by ${castSpeed}%; this is applied <b>after, and not additively to, CSPD stat</b>` }
                else { HTML += `<b>Motion Speed</b> increased by ${castSpeed}%; this effect stacks multiplicatively with the effects of [Freeze] and <b>Swift Combo tag</b>` }
                HTML += `</li><li><b>Buff Duration:</b> Until an attack skill from Magic Skills tree is used</li>`
                result.innerHTML = HTML
              }

              function calcChainCastAdditionalBuff(level, weapon, stack, result) {
                var matk = level * stack
                var stab = Math.floor(level * stack * 0.1)
                if (weapon == "staff") { stab *= 2 }
                if (weapon == "md") { matk *= 2 }
                var castTime = stack / 10
                var HTML = `<br><b>Additional Buff Effect:</b>
    <li><b>MATK</b> +${matk}</li>`
                if (stab != 0) { HTML += `<li><b>Magic Stability</b> +${stab}%</li>` }
                HTML += `<li>Reduces the <b>Base Cast Time</b> of all <b>attacking skill from Magic Skills Tree</b> by ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += `; this effect <b>cannot reduce the Base Cast Time to any lower than 1 second</b></li>
    <li><b>Stacks Duration:</b> 30 seconds; refresh upon gaining stack(s); loses 1 stack instead of the entire buff when the duration runs out</li>`
                if (weapon != "other") { result.innerHTML += HTML }
              }

              function addChainCastExtraInfo(weapon, result) {
                if (weapon != "other") {
                  result.innerHTML += `<br><b>Extra info:</b>
    <li>Unlike the <b>main buff</b>, the cast time reduction effect of the <b>Additional buff</b> is treated as <b>Base Cast Time reduction</b>, therefore it is applied <b>before CSPD stat</b></li>
    <li>As the cast time reduction effect of the <b>Additional buff</b> can only lower the <b>Base Cast Time</b> to a minimum of 1 second, skills with a Base Cast Time of 1 second or less will not benefit from this effect at all, and skills with a Base Cast Time of more than 1 second but below 2 seconds will receive reduced effect (though currently there is no such skill of the latter case exists in <b>Magic Skills Tree</b> yet)</li>
    <li><b>Chain Cast Additional Buff stacks</b> are granted <b>per hit</b> instead of <b>per skill</b>, therefore skills that can deal multiple hit will also give multiple stacks per cast</li>
    <li>For some reason, <b>Ether Flare</b> can also give 1 <b>Chain Cast Additional Buff stack</b></li>`}
              }

              function calcChainCastValues() {
                var weaponSelector = document.getElementById("chainCastWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("chainCastLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var isCastTime = document.getElementById("isCastTime").checked
                var ccStackSection = document.getElementById("chainCastStackInput")
                var stack = document.getElementById("chainCastStack").value
                var result = document.getElementById("chainCastValues")
                weaponChainCastCheck(weapon, ccStackSection)
                calcChainCastMainBuff(level, weapon, isCastTime, result)
                calcChainCastAdditionalBuff(level, weapon, stack, result)
                addChainCastExtraInfo(weapon, result)
              }

              calcChainCastValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/powerwave.png" width="34" height="34">
                Power Wave
              </p>
              <p class="medium">
                Skill Power Wave Level 3 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Passive</p>
            </div>
            <div>
              <p class="accent-bold"></p>
              <p>Neutral</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Shoot a magic wave if the target is out of range. Available from 5m or less away. The range extends up
                to
                10m
                as the skill levels up. Attack MP Recovery is applied to this skill.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>Power +40<br> Activation Range +2m.</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>Power +70</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="powerWaveWeapon" onchange="calcPowerWaveValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="DS">Dual Swords</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="waveLevel" onchange="calcPowerWaveValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>"Power Wave Modifier" Registlet Level:</b></span>
            <select id="powerWaveRegistlet" onchange="calcPowerWaveValues()">
              <option value="0" selected="">Unequipped</option>
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10">10</option>
            </select><br>
            <br>
            <span id="powerWaveValues"><b>Passive Effect:</b>
              <li>Auto attacking targets outside of <b>weapon's auto attack range</b> but within <b>Power Wave auto
                  attack
                  range</b> will perform an attack that has every characteristics of a regular auto attack (still
                applies
                Attack MP Recovery, inflicts normal attack proration, uses weapon element,...) but <b>has modified total
                  damage</b></li>
              <li><b>Power Wave Auto Attack Range</b>: 12m </li>
              <li><b>Power Wave Auto Attack Damage Penalty: </b> -10%</li>
              <li>Power Wave is <b>disabled when certain auto attack modifier skills are active</b></li><br><b>Extra
                info:</b>
              <li>If you have <b>Aggravate</b> and/or <b>Hidden Arm</b>, this passive will add one "additional wave" for
                each
                of them whenever they activate; these "additional waves" are purely aesthetic, however, with the only
                purpose
                being visualizing the additional hit, and have no other impact on gameplay</li><br>The bonus of <b>Main
                Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function addPowerWaveInfo(result) {
                result.innerHTML = `<b>Passive Effect:</b>`
              }

              function calcWaveRange(level, weapon, registlet, result) {
                var range = Math.floor(5 + (0.5 * level))
                if (weapon == "Staff") { range += 2 }
                if (registlet == 0) {
                  result.innerHTML += `<li>Auto attacking targets outside of <b>weapon's auto attack range</b> but within <b>Power Wave auto attack range</b> will perform an attack that has every characteristics of a regular auto attack (still applies Attack MP Recovery, inflicts normal attack proration, uses weapon element,...) but <b>has modified total damage</b></li>
    <li><b>Power Wave Auto Attack Range</b>: ${range}m </li>`
                }
                else { result.innerHTML += `<li>Increase Auto Attack Power while this passive is active</li>` }
              }

              function calcWaveDamagePenalty(level, weapon, registlet, result) {
                var damagePenalty
                if (registlet == 0) {
                  damagePenalty = -100 + (5 * level)
                  if (weapon == "Staff") { damagePenalty += 40 }
                  else if (weapon == "MD") { damagePenalty += 70 }
                }
                else { damagePenalty = (0.5 * level) + (0.5 * registlet) }

                // putting result into HTML
                if (damagePenalty > 0) { result.innerHTML += `<li><b>Power Wave Auto Attack Damage Bonus: </b> ${damagePenalty}%</li>` }
                else if (damagePenalty < 0) { result.innerHTML += `<li><b>Power Wave Auto Attack Damage Penalty: </b> ${damagePenalty}%</li>` }
              }

              function addPowerWaveDualSwordsInfo(weapon, result) {
                if (weapon == "DS") { result.innerHTML += `<li>Both Main-Hand and Sub-Hand Damage are summed before applying damage modifier, then spreaded evenly between the hits</li>` }
              }

              function addPowerWaveRampageInfo(result) {
                result.innerHTML += `<li>Power Wave is <b>disabled when certain auto attack modifier skills are active</b></li>`
              }

              function addPowerWaveExtraInfo(registlet, result) {
                if (registlet == 0) {
                  result.innerHTML += `<br><b>Extra info:</b>
    <li>If you have <b>Aggravate</b> and/or <b>Hidden Arm</b>, this passive will add one "additional wave" for each of them whenever they activate; these "additional waves" are purely aesthetic, however, with the only purpose being visualizing the additional hit, and have no other impact on gameplay</li>`}
              }

              function calcPowerWaveValues() {
                var weaponSelector = document.getElementById("powerWaveWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("waveLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var registletSelector = document.getElementById("powerWaveRegistlet")
                var registlet = registletSelector[registletSelector.selectedIndex].value
                var result = document.getElementById("powerWaveValues")
                addPowerWaveInfo(result)
                calcWaveRange(level, weapon, registlet, result)
                calcWaveDamagePenalty(level, weapon, registlet, result)
                addPowerWaveDualSwordsInfo(weapon, result)
                addPowerWaveRampageInfo(result)
                addPowerWaveExtraInfo(registlet, result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcPowerWaveValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/maximizer.png" width="34" height="34">
                Maximizer
              </p>
              <p class="medium">
                Skill Maximizer Level 4 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/all.png"><br>Available with all weapons
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>300</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>0</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Greatly restore MP. Cast Time is shortened as the skill levels up. If you use MP Charge before this
                skill,
                the Cast Time of Maximizer will be shortened according to the skill level of MP Charge when using the
                skill
                with a <b>Staff</b> or <b>Magic Device</b>.
              </p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p>MP Heal Amount +500</p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/md.png"></p>
                <p>Magic Device</p>
              </div>
              <p>MP Heal Amount +700</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="maximizerWeapon" onchange="calcMaximizer()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
              <option value="Other">Other</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="maximizerLevel" onchange="calcMaximizer()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <div id="mpChargeBuff" style="display: block;">
              <span class="sub-title"><b>MP Charge is used:</b></span>
              <input type="checkbox" id="maximizerMpCharge" onchange="calcMaximizer()"><br>
              <div id="mpChargeActive" style="display: none;">
                <span class="sub-title"><b>"MP Charge" Skill Level:</b></span>
                <select id="maxiMpChargeLevelSelect" onchange="calcMaximizer()">
                  <option value="1">1</option>
                  <option value="2">2</option>
                  <option value="3">3</option>
                  <option value="4">4</option>
                  <option value="5">5</option>
                  <option value="6">6</option>
                  <option value="7">7</option>
                  <option value="8">8</option>
                  <option value="9">9</option>
                  <option value="10" selected="">10</option>
                </select>
              </div>
            </div>
            <br>
            <span id="maximizerValues">
              <li><b>Cast Time:</b> 10 seconds (unaffected by CSPD)</li>
              <li><b>MP Recovered:</b> 1500</li><br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>
            </span>

            <script>
              function mpChargeMaxiCheck(weapon, mpChargeBuffSection, mpCharge, mpChargeActiveSection) {
                if (weapon != "Other") {
                  mpChargeBuffSection.style = "display: block"
                  if (mpCharge) { mpChargeActiveSection.style = "display: block" }
                  else { mpChargeActiveSection.style = "display: none" }
                }
                else { mpChargeBuffSection.style = "display: none" }
              }

              function calcMaximizerCastTime(level, weapon, mpCharge, mpChargeLevel, result) {
                var castTime = 17.5 - 0.5 * level - 0.5 * Math.max(0, level - 5)
                if (mpCharge && weapon != "Other") { castTime -= mpChargeLevel }
                var HTML = ``
                if (castTime > 0) {
                  HTML += `<li><b>Cast Time:</b> ${castTime} second`
                  if (castTime != 1) { HTML += `s` }
                  HTML += ` (unaffected by CSPD)</li>`
                }
                else { HTML += `<li><b>Instant Cast</b> without <b>Cast Time</b></li>` }
                result.innerHTML = HTML
              }

              function calcMaximizerMPRestored(weapon, result) {
                var mpRestore = 1000
                if (weapon == "Staff") { mpRestore += 500 }
                else if (weapon == "MD") { mpRestore += 700 }
                result.innerHTML += `<li><b>MP Recovered:</b> ${mpRestore}</li>`
              }

              function addMaximizerExtraInfo(weapon, mpCharge, result) {
                if (mpCharge && weapon != "Other") {
                  result.innerHTML += `<br><b>Extra info:</b>
    <li>This skill must be used within a few seconds after <b>MP Charge</b>, and <b>there must be no other skill being used between MP Charge and this skill (including auto-activated skills)</b>, in order for this skill to gain the cast time reduction</li>
    <li>This skill will use a different cast motion if its <b>Cast Time</b> is reduced to 0 seconds by its own effect</li>`}
              }

              function calcMaximizer() {
                var weaponSelector = document.getElementById("maximizerWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("maximizerLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var mpChargeBuffSection = document.getElementById("mpChargeBuff")
                var mpCharge = document.getElementById("maximizerMpCharge").checked
                var mpChargeActiveSection = document.getElementById("mpChargeActive")
                var mpChargeSelector = document.getElementById("maxiMpChargeLevelSelect")
                var mpChargeLevel = mpChargeSelector[mpChargeSelector.selectedIndex].value
                var result = document.getElementById("maximizerValues")
                mpChargeMaxiCheck(weapon, mpChargeBuffSection, mpCharge, mpChargeActiveSection)
                calcMaximizerCastTime(level, weapon, mpCharge, mpChargeLevel, result)
                calcMaximizerMPRestored(weapon, result)
                addMaximizerExtraInfo(weapon, mpCharge, result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcMaximizer()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/mpcharge.png" width="34" height="34">
                Rapid Charge
              </p>
              <p class="medium">
                Skill Rapid Charge Level 5 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/md.png"><img src="images/icon/staff.png"><br>Magic Device/Staff only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Passive</p>
            </div>
            <div>
              <p class="accent-bold"></p>
              <p>Neutral</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Slightly accelerates MP Charge. (<font style="color: #009fff">Up to Lv5</font>).<br>
                Enhances MATK and Magic Pierce (<font style="color: #009fff">max 50%</font>) that depends on MP Heal
                Amount
                when followed by the activation of Maximizer. <b style="color: gold">*Starting from Lv6, it will only
                  extend
                  the buff duration.</b></p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details>
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="rapidChargeWeapon" onchange="calcRapidChargeValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="rapidChargeLevel" onchange="calcRapidChargeValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>"MP Charge → Maximizer" is used:</b></span>
            <input type="checkbox" id="rapidChargeMaximizer" onchange="calcRapidChargeValues()"><br>
            <div id="maximizerActive" style="display: none;">
              <span class="sub-title"><b>MP Recovered with "Maximizer":</b></span>
              <input type="number" value="1500" min="0" max="1500" step="10" id="rapidChargeMpRecover"
                onchange="calcRapidChargeValues()" style="width: 50px;"><br>
              <span class="sub-title"><b>Caster's Magic Pierce (%):</b> </span>
              <input type="number" value="0" min="0" max="100" id="rapidChargeMagicPierce"
                onchange="calcRapidChargeValues()" style="width: 50px;"><br>
            </div>
            <br>
            <span id="rapidChargeValues">
              <li>Reduces the <b>Cast Time</b> of <b>MP Charge</b> by 1 second</li>
              <li>Upon casting <b>Maximizer</b> after <b>MP Charge</b>, grants <b>Rapid Charge buff</b> to the
                <b>caster</b>
              </li>
            </span>

            <script>
              function mpChargeCheck(maximizer, mpChargeSection) {
                if (maximizer) { mpChargeSection.style = "display: block" }
                else { mpChargeSection.style = "display: none" }
              }

              function calcRapidChargeMaxiMaxMp(weapon, mpHealInput) {
                if (weapon == "Staff") {
                  mpHealInput.max = 1500
                  if (mpHealInput.value > 1500) { mpHealInput.value = 1500 }
                }
                else { mpHealInput.max = 1700 }
              }

              function calcRapidChargeCastTime(level, result) {
                var castTime = Math.round(0.2 * Math.min(5, level) * 100) / 100
                var HTML = `<li>Reduces the <b>Cast Time</b> of <b>MP Charge</b> by ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += `</li>`
                result.innerHTML = HTML
              }

              function calcRapidChargeBuffEffect(level, weapon, maximizer, mpHeal, mPierce, result) {
                var matk = mpHeal / 10
                if (weapon == "Staff") { matk += Math.max(0, Math.min(150, (mPierce - 20) * 5) - (1500 - mpHeal) / 10) }
                else { matk += Math.max(0, Math.min(170, (mPierce - 16) * 5) - (1700 - mpHeal) / 10) }
                var mPen = 0
                if (weapon == "Staff") { mPen += Math.max(0, mpHeal / 50 - Math.max(0, mPierce - 20)) }
                else { mPen += Math.max(0, mpHeal / 50 - Math.max(0, mPierce - 16)) }
                matk = Math.round(matk)
                mPen = Math.round(mPen)
                var duration = 40 + 10 * Math.max(0, level - 5)
                var HTML = `<li>Upon casting <b>Maximizer</b> after <b>MP Charge</b>, grants <b>Rapid Charge buff</b> to the <b>caster</b></li>`
                if (maximizer) {
                  HTML += `<br><b>Buff Effect:</b>
        <li><b>MATK</b> +${matk}</li>`
                  if (mPen > 0) { HTML += `<li><b>Magic Pierce</b> +${mPen}%</li>` }
                  HTML += `<li><b>Buff Duration:</b> ${duration} seconds</li>`
                }
                result.innerHTML += HTML
              }

              function calcRapidChargeValues() {
                let weaponSelector = document.getElementById("rapidChargeWeapon")
                let weapon = weaponSelector[weaponSelector.selectedIndex].value
                let levelSelector = document.getElementById("rapidChargeLevel")
                let level = levelSelector[levelSelector.selectedIndex].value
                let maximizer = document.getElementById("rapidChargeMaximizer").checked
                let mpChargeSection = document.getElementById("maximizerActive")
                let mpHealInput = document.getElementById("rapidChargeMpRecover")
                let mpHeal = document.getElementById("rapidChargeMpRecover").value
                let mPierce = document.getElementById("rapidChargeMagicPierce").value
                let result = document.getElementById("rapidChargeValues")
                mpChargeCheck(maximizer, mpChargeSection)
                calcRapidChargeMaxiMaxMp(weapon, mpHealInput)
                calcRapidChargeCastTime(level, result)
                calcRapidChargeBuffEffect(level, weapon, maximizer, mpHeal, mPierce, result)
              }

              calcRapidChargeValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/enchantedbarriers.png" width="34" height="34">
                Enchanted Barriers
              </p>
              <p class="medium">
                Skill Enchanted Barriers Level 5 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/staff.png"><img src="images/icon/md-main.png"><br>Staff/Main MD only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Neutral</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>400</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>0</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Creates a barrier to protect yourself. If you are inside the barrier, damage will be absorbed. Beside,
                you
                won't flinch while casting and aggro from MP consumption will be reduced. <b
                  style="color: gold">Restoring
                  MP
                  inside the barrier will restore the barrier's HP too.</b></p>
            </div>
            <div class="span-2">
              <div class="accent-bold" style="display:grid;grid-template-columns: 35px auto;grid-column-gap: 10px">
                <p><img src="images/icon/staff.png"></p>
                <p>Staff</p>
              </div>
              <p><b style="color: gold">[Get the same effect when used with a Magic Device]</b><br>
                INT and weapon performance increase the barrier's HP.<br>
                Damage absorbed is between 50-100% based on the type of damage.<br>
                Inside the barrier, damage taken is greatly decreased, Action Speed increases, and the buff count of
                Magic:
                Burst increases a lot.<br>
                The cast time of Magic: Finale becomes shorter inside the barrier.</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details open="">
            <summary>Show more...</summary><br><span class="sub-title"><b>Weapon:</b></span>
            <select id="enchantedBarriersWeapon" onchange="calcEnchantedBarriersValues()">
              <option value="Staff" selected="">Staff</option>
              <option value="MD">Magic Device</option>
            </select><br>
            <span class="sub-title"><b>Skill Level:</b></span>
            <select id="enchantedBarriersLevel" onchange="calcEnchantedBarriersValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Cast Speed:</b></span>
            <input type="number" style="width: 6em; text-align: right" value="0" id="enchantedBarriersCSPD"
              onchange="calcEnchantedBarriersValues()"><br>
            <br>
            <span id="enchantedBarriersValues">
              <li><b>Cast Time:</b> 1 second (affected by CSPD)</li>
              <li>Grants <b>Enchanted Barriers buff</b> with 10 stacks</li>
              <br><b>Buff Effect:</b>
              <li>Upon taking physical/magic damage, consume 1 stack to reduce received damage by 15%, increases to 75%
                damage
                reduction <b>during casting</b></li>
              <li>If the damage exceeds <b>10% of your MaxHP</b>, 1 additional stack will be consumed for every 10% of
                your
                MaxHP worth of damage</li>
              <li>Prevents [Magic Flinch] during casting</li>
              <li><b>Buff Duration:</b> Until all stacks are consumed</li><br>The bonus of <b>Main Weapon</b> overwrites
              that
              of <b>Sub Weapon</b>
            </span>

            <script>
              function calcCastTime(baseCastTime, CSPD) {
                var castTime = baseCastTime * 1
                var modifier1 = CSPD / 2000
                var modifier2 = (CSPD - 1000) / 18000
                if (CSPD <= 1000) { castTime = castTime * (1 - modifier1) }
                else { castTime = castTime * (1 - (0.5 + modifier2)) }
                castTime = Math.ceil(castTime * 100) / 100
                if (castTime < 0) { castTime = 0 }
                return castTime
              }

              function calcEnchantedBarriersValuesCastTime(CSPD, result) {
                const baseCastTime = 1
                var castTime = calcCastTime(baseCastTime, CSPD)
                var HTML = `<li><b>Cast Time:</b> ${castTime} second`
                if (castTime != 1) { HTML += `s` }
                HTML += ` (affected by CSPD)</li>`
                result.innerHTML = HTML
              }

              function calcEnchantedBarriersValuesEffects(level, weapon, result) {
                var count = 1 * level
                if (weapon == "MD") { count += 2 }
                var stack = count + ` stack`
                if (count != 1) { stack += `s` }
                var dmgRed = 1 * level
                if (weapon == "Staff") { dmgRed += 5 }
                result.innerHTML += `<li>Grants <b>Enchanted Barriers buff</b> with ${stack}</li>
    <br><b>Buff Effect:</b>
    <li>Upon taking physical/magic damage, consume 1 stack to reduce received damage by ${dmgRed}%, increases to ${dmgRed * 5}% damage reduction <b>during casting</b></li>
    <li>If the damage exceeds <b>10% of your MaxHP</b>, 1 additional stack will be consumed for every 10% of your MaxHP worth of damage</li>
    <li>Prevents [Magic Flinch] during casting</li>
    <li><b>Buff Duration:</b> Until all stacks are consumed</li>`
              }

              function calcEnchantedBarriersValues() {
                var weaponSelector = document.getElementById("enchantedBarriersWeapon")
                var weapon = weaponSelector[weaponSelector.selectedIndex].value
                var levelSelector = document.getElementById("enchantedBarriersLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var CSPD = document.getElementById("enchantedBarriersCSPD").value
                var result = document.getElementById("enchantedBarriersValues")
                calcEnchantedBarriersValuesCastTime(CSPD, result)
                calcEnchantedBarriersValuesEffects(level, weapon, result)
                result.innerHTML += `<br>The bonus of <b>Main Weapon</b> overwrites that of <b>Sub Weapon</b>`
              }

              calcEnchantedBarriersValues()
            </script>
          </details>
          <p></p>
        </div>

        <hr class="separator">

        <div>
          <div style="display:grid;grid-template-columns: 1fr 1fr;">
            <div>
              <p class="card-title">
                <img src="skill/magic/guardianbeam.png" width="34" height="34">
                Magic: Guardian Beam
              </p>
              <p class="medium">
                Skill Magic: Guardian Beam Level 3 </p>
            </div>
            <div style="justify-self:end;">
              <img src="images/icon/staff.png"><img src="images/icon/md-main.png"><br>Staff/Main MD only
            </div>
          </div>
          <hr class="separator">
          <div class="monster-prop">
            <div>
              <p class="accent-bold">Type</p>
              <p>Active, Magic skill</p>
            </div>
            <div>
              <p class="accent-bold">Element</p>
              <p>Weapon Dependent</p>
            </div>
            <div>
              <p class="accent-bold">MP</p>
              <p>300</p>
            </div>
            <!-- $result_string .= sprintf("<td><b>Aggro</b></td>	<td>%s</td>", $row['aggro_text']); -->
            <div>
              <p class="accent-bold">Combo start</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Combo middle</p>
              <p>Yes</p>
            </div>
            <div>
              <p class="accent-bold">Range</p>
              <p>0</p>
            </div>
            <div class="span-2">
              <p class="accent-bold">Description</p>
              <p>Emits light to protect the caster. While active, magic attacks will be executed at a certain time such
                as
                after other magic skills are cast, or after dealing damage to an enemy.</p>
            </div>
          </div>
          <p class="accent-bold">Extras</p>
          <p></p>
          <details open="">
            <summary>Show more...</summary><br><span class="sub-title"><b>Skill Level:</b></span>
            <select id="magicGuardianBeamLevel" onchange="calcMagicGuardianBeamValues()">
              <option value="1">1</option>
              <option value="2">2</option>
              <option value="3">3</option>
              <option value="4">4</option>
              <option value="5">5</option>
              <option value="6">6</option>
              <option value="7">7</option>
              <option value="8">8</option>
              <option value="9">9</option>
              <option value="10" selected="">10</option>
            </select><br>
            <span class="sub-title"><b>Total INT:</b></span>
            <input type="number" id="intInput" value="1" style="width: 4em; text-align: right"
              onchange="calcMagicGuardianBeamValues()"><br>
            <br>
            <span id="magicGuardianBeamValues">
              <li><b>Skill Constant: </b> 80; constant for each hit</li>
              <li><b>Skill Multiplier:</b> 5.4; multiplier for each hit</li>
              <li><b>Hit Count:</b> 1 hit for each stack; damage calculation is done for each hit</li><br><b>Buff
                Effect:</b>
              <li>Grants a buff with 10 stacks</li>
              <li>When using a <b>magic skill with cast time</b>, consumes 1 stack for every second of cast time to
                launch
                a
                beam to attack the target, then 1 more stack after cast time ends for the same purpose. AoE magic skills
                that
                hit (but doesn't kill) other targets will <b>consume additional stacks that is equal to the number of
                  other
                  targets</b> to attack them</li>
              <li>The caster must have the targets' aggro, and they must be within 8m range from the caster in order to
                trigger the beams</li>
              <li>The beams cause knockback 4m on targets that are <b>neither bosses nor minibosses</b></li>
              <li><b>Buff Duration:</b> Until all stacks are used up</li><br><b>Extra Info:</b>
              <li>This skill is unaffected by <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range
                  Damage</b> stats; it's also unaffected by Combo Tags</li>
              <li>This skill uses <b>Magic Proration</b> for its damage calculation, but <b>does not inflict
                  proration</b>
              </li><br>Credits to <b>Phantom Library</b> for the info of the skill
            </span>

            <script>
              function calcGuardianBeamConstant(level, result) {
                var constant = 50 + 3 * level
                result.innerHTML = `<li><b>Skill Constant: </b> ${constant}; constant for each hit</li>`
              }

              function calcGuardianBeamMultiplier(intValue, result) {
                var multiplier = 0.5 + intValue / 100
                multiplier = Math.round(multiplier * 100) / 100
                result.innerHTML += `<li><b>Skill Multiplier:</b> ${multiplier}; multiplier for each hit</li>`
              }

              function calcGuardianBeamHitCount(level, result) {
                var HTML = `<li><b>Hit Count:</b> 1 hit`
                if (level > 1) { HTML += ` for each stack; damage calculation is done for each hit` }
                HTML += `</li><br>`
                result.innerHTML += HTML
              }

              function calcGuardianBeamBuff(level, result) {
                HTML = `<b>Buff Effect:</b>
    <li>Grants a buff with ${level} stack`
                if (level > 1) { HTML += `s` }
                HTML += `</li><li>When using a <b>magic skill with cast time</b>, consumes 1 stack for every second of cast time to launch a beam to attack the target, then 1 more stack after cast time ends for the same purpose. AoE magic skills that hit (but doesn't kill) other targets will <b>consume additional stacks that is equal to the number of other targets</b> to attack them</li>
    <li>The caster must have the targets' aggro, and they must be within 8m range from the caster in order to trigger the beams</li>
    <li>The beams cause knockback 4m on targets that are <b>neither bosses nor minibosses</b></li>
    <li><b>Buff Duration:</b> Until all stacks are used up</li><br>`
                result.innerHTML += HTML
              }

              function addMagicGuardianBeamExtra(result) {
                result.innerHTML += `<b>Extra Info:</b>
    <li>This skill is unaffected by <b>Long Range passive</b>, <b>Short Range Damage</b> and <b>Long Range Damage</b> stats; it's also unaffected by Combo Tags</li>
    <li>This skill uses <b>Magic Proration</b> for its damage calculation, but <b>does not inflict proration</b></li>`
              }

              function calcMagicGuardianBeamValues() {
                var levelSelector = document.getElementById("magicGuardianBeamLevel")
                var level = levelSelector[levelSelector.selectedIndex].value
                var intValue = document.getElementById("intInput").value;
                var result = document.getElementById("magicGuardianBeamValues")
                calcGuardianBeamConstant(level, result)
                calcGuardianBeamMultiplier(intValue, result)
                calcGuardianBeamHitCount(level, result)
                calcGuardianBeamBuff(level, result)
                addMagicGuardianBeamExtra(result)
                result.innerHTML += "<br>Credits to <b>Phantom Library</b> for the info of the skill"
              }

              calcMagicGuardianBeamValues()
            </script>
          </details>
          <p></p>
        </div>

      </div>
    </div>

</body>

<script src="../../templates/functions-skills-list/magic.js"></script>